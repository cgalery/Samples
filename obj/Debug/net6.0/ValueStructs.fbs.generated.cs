
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 6.2.1.PRu3+pw/k8qXF/fYD1ctBVu9rAvi+I1HzsgP8jOyuBM=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_9970c64b9cb34d84b3b9f9b7bba9866f
    {
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.ValueStructs.Path? Clone(global::Samples.ValueStructs.Path? item)
        {
            checked
            {
                return item is null ? null : new Samples.ValueStructs.Path(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Samples.ValueStructs.Point>? Clone(global::System.Collections.Generic.IList<Samples.ValueStructs.Point>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.ValueStructs.Point>(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.ValueStructs.Point Clone(global::Samples.ValueStructs.Point item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Single Clone(global::System.Single item)
        {
            checked
            {
                return item;
            }
        }
    }

}

namespace Samples.ValueStructs
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Path
        : object
        , IFlatBufferSerializable<Samples.ValueStructs.Path>
    {
#pragma warning disable CS8618
        public Path()
        {
            checked
            {
                this.Points = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Path(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Path(Path source)
        {
            checked
            {
                this.Points = FlatSharp.Compiler.Generated.CloneHelpers_9970c64b9cb34d84b3b9f9b7bba9866f.Clone(source.Points);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual IList<Samples.ValueStructs.Point>? Points { get; set; }
        public static ISerializer<Samples.ValueStructs.Path> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.ValueStructs.Path> IFlatBufferSerializable<Samples.ValueStructs.Path>.Serializer => Serializer;

        #region Serializer for Samples.ValueStructs.Path

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.Lazy)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.ValueStructs.Path>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.1";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.Lazy;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.ValueStructs.Path root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_b3a72d88201349d49adda2eafa9ccf6d(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.ValueStructs.Path root)
            {
                checked
                {
                    return GetMaxSizeOf_b3a72d88201349d49adda2eafa9ccf6d(root);
                }
            }

            public global::Samples.ValueStructs.Path Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_b3a72d88201349d49adda2eafa9ccf6d(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_b3a72d88201349d49adda2eafa9ccf6d(global::Samples.ValueStructs.Path value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.Points;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_0d5375c18de0405fb108cefa3b4bbc2f(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.ValueStructs.Path Read_b3a72d88201349d49adda2eafa9ccf6d<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_0c1cab49f1064f52b501f80d70c61123<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_0c1cab49f1064f52b501f80d70c61123<TInputBuffer>
                : global::Samples.ValueStructs.Path
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



                private TInputBuffer __buffer;
                private int __offset;
                private VTable4 __vtable;

                public static tableReader_0c1cab49f1064f52b501f80d70c61123<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_0c1cab49f1064f52b501f80d70c61123<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_0c1cab49f1064f52b501f80d70c61123(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.ValueStructs.Path);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;


                public override System.Collections.Generic.IList<Samples.ValueStructs.Point>? Points
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable);
                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.ValueStructs.Point>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_0d5375c18de0405fb108cefa3b4bbc2f(buffer, absoluteLocation, tableMetadata_672490b56c63450ca6fe6d1192ff836c.Points);
                    }
                }
            }



            private static void WriteInlineValueOf_b3a72d88201349d49adda2eafa9ccf6d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.ValueStructs.Path value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.Points;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 6;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_0d5375c18de0405fb108cefa3b4bbc2f(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_672490b56c63450ca6fe6d1192ff836c
            {

                public static readonly TableFieldContext Points = new TableFieldContext(
                    "Samples.ValueStructs.Path.Points",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_0d5375c18de0405fb108cefa3b4bbc2f(global::System.Collections.Generic.IList<Samples.ValueStructs.Point> value)
            {
                checked
                {
                    return 10 + (12 * value.Count);
                }
            }

            private static global::System.Collections.Generic.IList<Samples.ValueStructs.Point> Read_0d5375c18de0405fb108cefa3b4bbc2f<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new FlatBufferVector_bd7355cdbe7a42329fd8c5b4b5363c66<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    12,
                    fieldContext);
                }
            }

            public sealed class FlatBufferVector_bd7355cdbe7a42329fd8c5b4b5363c66<TInputBuffer> : FlatBufferVector<global::Samples.ValueStructs.Point, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_bd7355cdbe7a42329fd8c5b4b5363c66(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.ValueStructs.Point item)
                {
                    checked
                    {
                        item = Read_c5c39cc7b3ee474b8d4bdf8af940d87c(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.ValueStructs.Point item, Span<byte> data)
                {
                    checked
                    {
                        WriteInlineValueOf_c5c39cc7b3ee474b8d4bdf8af940d87c(default(SpanWriter), data, item, 0);
                    }
                }
            }



            private static void WriteInlineValueOf_0d5375c18de0405fb108cefa3b4bbc2f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.ValueStructs.Point> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 12);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.ValueStructs.Point[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];


                            WriteInlineValueOf_c5c39cc7b3ee474b8d4bdf8af940d87c(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                    else if (value is List<Samples.ValueStructs.Point> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];


                            WriteInlineValueOf_c5c39cc7b3ee474b8d4bdf8af940d87c(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];


                            WriteInlineValueOf_c5c39cc7b3ee474b8d4bdf8af940d87c(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_c5c39cc7b3ee474b8d4bdf8af940d87c(global::Samples.ValueStructs.Point value)
            {
                checked
                {
                    return 15;
                }
            }

            private static global::Samples.ValueStructs.Point Read_c5c39cc7b3ee474b8d4bdf8af940d87c<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    var item = default(global::Samples.ValueStructs.Point);

                    item.X = Read_7d68804567014e81bc42e6fae33aa5a6<TInputBuffer>(
                        buffer,
                        offset + 0);

                    item.Y = Read_7d68804567014e81bc42e6fae33aa5a6<TInputBuffer>(
                        buffer,
                        offset + 4);

                    item.Z = Read_7d68804567014e81bc42e6fae33aa5a6<TInputBuffer>(
                        buffer,
                        offset + 8);
                    return item;

                }
            }

            private static void WriteInlineValueOf_c5c39cc7b3ee474b8d4bdf8af940d87c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.ValueStructs.Point value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    Span<byte> sizedSpan = span.Slice(offset, 12);
                    WriteInlineValueOf_7d68804567014e81bc42e6fae33aa5a6(spanWriter, sizedSpan, value.X, 0);
                    WriteInlineValueOf_7d68804567014e81bc42e6fae33aa5a6(spanWriter, sizedSpan, value.Y, 4);
                    WriteInlineValueOf_7d68804567014e81bc42e6fae33aa5a6(spanWriter, sizedSpan, value.Z, 8);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_7d68804567014e81bc42e6fae33aa5a6(global::System.Single value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Single Read_7d68804567014e81bc42e6fae33aa5a6<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadFloat(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_7d68804567014e81bc42e6fae33aa5a6<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Single value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteFloat(span, value, offset);
                }
            }
        }

        #endregion
    }

}

namespace Samples.ValueStructs
{
    [FlatBufferStruct()]
    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit, Size = 12)]
    public partial struct Point
    {
        [System.Runtime.InteropServices.FieldOffset(0)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "X")]
        public float X;

        [System.Runtime.InteropServices.FieldOffset(4)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Y")]
        public float Y;

        [System.Runtime.InteropServices.FieldOffset(8)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Z")]
        public float Z;

    }

}

