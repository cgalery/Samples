
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 6.2.1.wAQXm/cHvfcbkpW2NYX9mGtEKAWQiH9Y8AUQdc2//MI=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_df38544bff6941ccb60da02ab528f999
    {
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.GrpcExample.MultiMessage? Clone(global::Samples.GrpcExample.MultiMessage? item)
        {
            checked
            {
                return item is null ? null : new Samples.GrpcExample.MultiMessage(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<System.String>? Clone(global::System.Collections.Generic.IList<System.String>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<System.String>(item, FlatSharp.Compiler.Generated.CloneHelpers_df38544bff6941ccb60da02ab528f999.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.String? Clone(global::System.String? item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.GrpcExample.SingleMessage? Clone(global::Samples.GrpcExample.SingleMessage? item)
        {
            checked
            {
                return item is null ? null : new Samples.GrpcExample.SingleMessage(item);
            }
        }
    }

}

namespace Samples.GrpcExample
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class MultiMessage
        : object
        , IFlatBufferSerializable<Samples.GrpcExample.MultiMessage>
    {
#pragma warning disable CS8618
        public MultiMessage()
        {
            checked
            {
                this.Message = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected MultiMessage(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public MultiMessage(MultiMessage source)
        {
            checked
            {
                this.Message = FlatSharp.Compiler.Generated.CloneHelpers_df38544bff6941ccb60da02ab528f999.Clone(source.Message);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0, Required = true, SharedString = true)]
        public virtual IList<string> Message { get; set; }
        public static ISerializer<Samples.GrpcExample.MultiMessage> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.GrpcExample.MultiMessage> IFlatBufferSerializable<Samples.GrpcExample.MultiMessage>.Serializer => Serializer;

        #region Serializer for Samples.GrpcExample.MultiMessage

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.Lazy)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.GrpcExample.MultiMessage>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.1";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.Lazy;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.GrpcExample.MultiMessage root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_f9b9b33e6ef447998a9386db2806dc66(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.GrpcExample.MultiMessage root)
            {
                checked
                {
                    return GetMaxSizeOf_f9b9b33e6ef447998a9386db2806dc66(root);
                }
            }

            public global::Samples.GrpcExample.MultiMessage Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_f9b9b33e6ef447998a9386db2806dc66(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_f9b9b33e6ef447998a9386db2806dc66(global::Samples.GrpcExample.MultiMessage value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.Message;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_b51078350bc9410aad8005e4bc423e4d(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.GrpcExample.MultiMessage Read_f9b9b33e6ef447998a9386db2806dc66<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_12302f2c8dc041b2a9a1dd4ce55f2a30<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_12302f2c8dc041b2a9a1dd4ce55f2a30<TInputBuffer>
                : global::Samples.GrpcExample.MultiMessage
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



                private TInputBuffer __buffer;
                private int __offset;
                private VTable4 __vtable;

                public static tableReader_12302f2c8dc041b2a9a1dd4ce55f2a30<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_12302f2c8dc041b2a9a1dd4ce55f2a30<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_12302f2c8dc041b2a9a1dd4ce55f2a30(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.GrpcExample.MultiMessage);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;


                public override System.Collections.Generic.IList<System.String> Message
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable);
                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String> ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                throw new global::System.IO.InvalidDataException("Table property 'Samples.GrpcExample.MultiMessage.Message' is marked as required, but was missing from the buffer.");
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_b51078350bc9410aad8005e4bc423e4d(buffer, absoluteLocation, tableMetadata_03a64936258a46dcbe45f0d37cfd501e.Message);
                    }
                }
            }



            private static void WriteInlineValueOf_f9b9b33e6ef447998a9386db2806dc66<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.GrpcExample.MultiMessage value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 6;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.Message;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                    }
                    else
                    {
                        throw new System.InvalidOperationException("Table property 'Samples.GrpcExample.MultiMessage.Message' is marked as required, but was not set.");
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_b51078350bc9410aad8005e4bc423e4d(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_03a64936258a46dcbe45f0d37cfd501e.Message);

                    }

                }
            }

            private static class tableMetadata_03a64936258a46dcbe45f0d37cfd501e
            {

                public static readonly TableFieldContext Message = new TableFieldContext(
                    "Samples.GrpcExample.MultiMessage.Message",
                    true,
                    false);
            }



            private static int GetMaxSizeOf_b51078350bc9410aad8005e4bc423e4d(global::System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_8ac851873f684ba792d1a05d03ed68d8(current);
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_8ac851873f684ba792d1a05d03ed68d8(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_8ac851873f684ba792d1a05d03ed68d8(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<System.String> Read_b51078350bc9410aad8005e4bc423e4d<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new FlatBufferVector_9d215d822de94284a79004622aefe571<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    fieldContext);
                }
            }

            public sealed class FlatBufferVector_9d215d822de94284a79004622aefe571<TInputBuffer> : FlatBufferVector<global::System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_9d215d822de94284a79004622aefe571(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::System.String item)
                {
                    checked
                    {
                        item = Read_8ac851873f684ba792d1a05d03ed68d8(memory, offset);
                    }
                }

                protected override void WriteThrough(global::System.String item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_b51078350bc9410aad8005e4bc423e4d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<System.String> value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_8ac851873f684ba792d1a05d03ed68d8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_8ac851873f684ba792d1a05d03ed68d8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_8ac851873f684ba792d1a05d03ed68d8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_8ac851873f684ba792d1a05d03ed68d8(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_8ac851873f684ba792d1a05d03ed68d8<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_8ac851873f684ba792d1a05d03ed68d8<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    if (fieldContext.SharedString)
                    {
                        var sharedStringWriter = context.SharedStringWriter;
                        if (!(sharedStringWriter is null))
                        {
                            sharedStringWriter.WriteSharedString(
                                spanWriter,
                                span,
                                offset,
                                value,
                                context);

                            return;
                        }
                    }

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }
        }

        #endregion
    }

}

namespace Samples.GrpcExample
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class SingleMessage
        : object
        , IFlatBufferSerializable<Samples.GrpcExample.SingleMessage>
    {
#pragma warning disable CS8618
        public SingleMessage()
        {
            checked
            {
                this.Message = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected SingleMessage(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public SingleMessage(SingleMessage source)
        {
            checked
            {
                this.Message = FlatSharp.Compiler.Generated.CloneHelpers_df38544bff6941ccb60da02ab528f999.Clone(source.Message);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0, Required = true)]
        public virtual string Message { get; set; }
        public static ISerializer<Samples.GrpcExample.SingleMessage> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.GrpcExample.SingleMessage> IFlatBufferSerializable<Samples.GrpcExample.SingleMessage>.Serializer => Serializer;

        #region Serializer for Samples.GrpcExample.SingleMessage

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.Lazy)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.GrpcExample.SingleMessage>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.1";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.Lazy;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.GrpcExample.SingleMessage root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_4de69950cd5a47a2bd0cd63c7055530a(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.GrpcExample.SingleMessage root)
            {
                checked
                {
                    return GetMaxSizeOf_4de69950cd5a47a2bd0cd63c7055530a(root);
                }
            }

            public global::Samples.GrpcExample.SingleMessage Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_4de69950cd5a47a2bd0cd63c7055530a(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_4de69950cd5a47a2bd0cd63c7055530a(global::Samples.GrpcExample.SingleMessage value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.Message;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_ac1f79b288ed4019b9e5dbdc98bc3400(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.GrpcExample.SingleMessage Read_4de69950cd5a47a2bd0cd63c7055530a<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_cc1edd3cd7644f9191784d1a397b587b<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_cc1edd3cd7644f9191784d1a397b587b<TInputBuffer>
                : global::Samples.GrpcExample.SingleMessage
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



                private TInputBuffer __buffer;
                private int __offset;
                private VTable4 __vtable;

                public static tableReader_cc1edd3cd7644f9191784d1a397b587b<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_cc1edd3cd7644f9191784d1a397b587b<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_cc1edd3cd7644f9191784d1a397b587b(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.GrpcExample.SingleMessage);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;


                public override System.String Message
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable);
                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                throw new global::System.IO.InvalidDataException("Table property 'Samples.GrpcExample.SingleMessage.Message' is marked as required, but was missing from the buffer.");
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_ac1f79b288ed4019b9e5dbdc98bc3400(buffer, absoluteLocation);
                    }
                }
            }



            private static void WriteInlineValueOf_4de69950cd5a47a2bd0cd63c7055530a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.GrpcExample.SingleMessage value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 6;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.Message;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                    }
                    else
                    {
                        throw new System.InvalidOperationException("Table property 'Samples.GrpcExample.SingleMessage.Message' is marked as required, but was not set.");
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_ac1f79b288ed4019b9e5dbdc98bc3400(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_0aa83ca2b3cf43f9b76fa6434c538441.Message);

                    }

                }
            }

            private static class tableMetadata_0aa83ca2b3cf43f9b76fa6434c538441
            {

                public static readonly TableFieldContext Message = new TableFieldContext(
                    "Samples.GrpcExample.SingleMessage.Message",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_ac1f79b288ed4019b9e5dbdc98bc3400(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_ac1f79b288ed4019b9e5dbdc98bc3400<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_ac1f79b288ed4019b9e5dbdc98bc3400<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }
        }

        #endregion
    }

}

namespace Samples.GrpcExample
{
    public interface IEchoService
    {
        Task<Samples.GrpcExample.SingleMessage> EchoUnary(Samples.GrpcExample.SingleMessage request, CancellationToken token);
        Task<Samples.GrpcExample.MultiMessage> EchoClientStreaming(System.Threading.Channels.ChannelReader<Samples.GrpcExample.SingleMessage> requestChannel, CancellationToken token);
        Task EchoServerStreaming(Samples.GrpcExample.MultiMessage request, System.Threading.Channels.ChannelWriter<Samples.GrpcExample.SingleMessage> responseChannel, CancellationToken token);
        Task EchoDuplex(System.Threading.Channels.ChannelReader<Samples.GrpcExample.SingleMessage> requestChannel, System.Threading.Channels.ChannelWriter<Samples.GrpcExample.SingleMessage> responseChannel, CancellationToken token);
    }

    public static partial class EchoService
    {

        public static class Serializer<T> where T : class
        {
            private static ISerializer<T> __value;
            static Serializer()
            {
                checked
                {
                    __value = null!;
                    System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(EchoService).TypeHandle);
                }
            }

            public static ISerializer<T> Value
            {
                get => __value;
                set => __value = value ?? throw new ArgumentNullException(nameof(value));
            }
        }


        private static Grpc.Core.Marshaller<T> CreateMarshaller<T>() where T : class
        {
            checked
            {
                return Grpc.Core.Marshallers.Create<T>(
                    (item, sc) =>
                    {
                        Serializer<T>.Value.Write(sc.GetBufferWriter(), item);
                        sc.Complete();
                    },
                    dc => Serializer<T>.Value.Parse(new ArrayInputBuffer(dc.PayloadAsNewBuffer())));
            }
        }

        private static readonly Grpc.Core.Marshaller<Samples.GrpcExample.SingleMessage> __Marshaller_16f70ca5228549df9a14aabe287c26c2 = CreateMarshaller<Samples.GrpcExample.SingleMessage>();
        private static readonly Grpc.Core.Marshaller<Samples.GrpcExample.MultiMessage> __Marshaller_eb38432b76ec4b30b3367c703bb6a34b = CreateMarshaller<Samples.GrpcExample.MultiMessage>();
        private static readonly Grpc.Core.Method<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage> __Method_2367f6e680fe447fa851fb9295a9135b = new Grpc.Core.Method<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage>(
            Grpc.Core.MethodType.Unary,
            "Samples.GrpcExample.EchoService",
            "EchoUnary",
            __Marshaller_16f70ca5228549df9a14aabe287c26c2,
            __Marshaller_16f70ca5228549df9a14aabe287c26c2);
        private static readonly Grpc.Core.Method<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.MultiMessage> __Method_738ba60ffb074817be9ebda0cdf30a21 = new Grpc.Core.Method<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.MultiMessage>(
            Grpc.Core.MethodType.ClientStreaming,
            "Samples.GrpcExample.EchoService",
            "EchoClientStreaming",
            __Marshaller_16f70ca5228549df9a14aabe287c26c2,
            __Marshaller_eb38432b76ec4b30b3367c703bb6a34b);
        private static readonly Grpc.Core.Method<Samples.GrpcExample.MultiMessage, Samples.GrpcExample.SingleMessage> __Method_95ffe304446d4c2a946a9eb76dc34349 = new Grpc.Core.Method<Samples.GrpcExample.MultiMessage, Samples.GrpcExample.SingleMessage>(
            Grpc.Core.MethodType.ServerStreaming,
            "Samples.GrpcExample.EchoService",
            "EchoServerStreaming",
            __Marshaller_eb38432b76ec4b30b3367c703bb6a34b,
            __Marshaller_16f70ca5228549df9a14aabe287c26c2);
        private static readonly Grpc.Core.Method<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage> __Method_b54a1fc9fc1c40dd87920cda084babd7 = new Grpc.Core.Method<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage>(
            Grpc.Core.MethodType.DuplexStreaming,
            "Samples.GrpcExample.EchoService",
            "EchoDuplex",
            __Marshaller_16f70ca5228549df9a14aabe287c26c2,
            __Marshaller_16f70ca5228549df9a14aabe287c26c2);
        static partial void OnStaticInitialization();

        static EchoService()
        {
            checked
            {
                Serializer<Samples.GrpcExample.SingleMessage>.Value = Samples.GrpcExample.SingleMessage.Serializer;
                Serializer<Samples.GrpcExample.MultiMessage>.Value = Samples.GrpcExample.MultiMessage.Serializer;
                OnStaticInitialization();
            }
        }

        [Grpc.Core.BindServiceMethod(typeof(EchoService), "BindService")]
        public abstract partial class EchoServiceServerBase
        {
            public abstract System.Threading.Tasks.Task<Samples.GrpcExample.SingleMessage> EchoUnary(Samples.GrpcExample.SingleMessage request, Grpc.Core.ServerCallContext callContext);
            public abstract System.Threading.Tasks.Task<Samples.GrpcExample.MultiMessage> EchoClientStreaming(Grpc.Core.IAsyncStreamReader<Samples.GrpcExample.SingleMessage> requestStream, Grpc.Core.ServerCallContext callContext);
            public abstract System.Threading.Tasks.Task EchoServerStreaming(Samples.GrpcExample.MultiMessage request, Grpc.Core.IServerStreamWriter<Samples.GrpcExample.SingleMessage> responseStream, Grpc.Core.ServerCallContext callContext);
            public abstract System.Threading.Tasks.Task EchoDuplex(Grpc.Core.IAsyncStreamReader<Samples.GrpcExample.SingleMessage> requestStream, Grpc.Core.IServerStreamWriter<Samples.GrpcExample.SingleMessage> responseStream, Grpc.Core.ServerCallContext callContext);
        }

        public static Grpc.Core.ServerServiceDefinition BindService(EchoServiceServerBase serviceImpl)
        {
            checked
            {
                return Grpc.Core.ServerServiceDefinition.CreateBuilder()
                    .AddMethod(__Method_2367f6e680fe447fa851fb9295a9135b, serviceImpl.EchoUnary)
                    .AddMethod(__Method_738ba60ffb074817be9ebda0cdf30a21, serviceImpl.EchoClientStreaming)
                    .AddMethod(__Method_95ffe304446d4c2a946a9eb76dc34349, serviceImpl.EchoServerStreaming)
                    .AddMethod(__Method_b54a1fc9fc1c40dd87920cda084babd7, serviceImpl.EchoDuplex)
                    .Build();
            }
        }

        public static void BindService(Grpc.Core.ServiceBinderBase serviceBinder, EchoServiceServerBase serviceImpl)
        {
            checked
            {
                serviceBinder.AddMethod(__Method_2367f6e680fe447fa851fb9295a9135b,
                    serviceImpl == null
                        ? null
                        : new Grpc.Core.UnaryServerMethod<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage>(serviceImpl.EchoUnary));
                serviceBinder.AddMethod(__Method_738ba60ffb074817be9ebda0cdf30a21,
                    serviceImpl == null
                        ? null
                        : new Grpc.Core.ClientStreamingServerMethod<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.MultiMessage>(serviceImpl.EchoClientStreaming));
                serviceBinder.AddMethod(__Method_95ffe304446d4c2a946a9eb76dc34349,
                    serviceImpl == null
                        ? null
                        : new Grpc.Core.ServerStreamingServerMethod<Samples.GrpcExample.MultiMessage, Samples.GrpcExample.SingleMessage>(serviceImpl.EchoServerStreaming));
                serviceBinder.AddMethod(__Method_b54a1fc9fc1c40dd87920cda084babd7,
                    serviceImpl == null
                        ? null
                        : new Grpc.Core.DuplexStreamingServerMethod<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage>(serviceImpl.EchoDuplex));
            }
        }

        public partial class EchoServiceClient : Grpc.Core.ClientBase<EchoServiceClient>, IEchoService
        {
            public EchoServiceClient(Grpc.Core.ChannelBase channel) : base(channel)
            {
                checked
                { }
            }

            public EchoServiceClient(Grpc.Core.CallInvoker callInvoker) : base(callInvoker)
            {
                checked
                { }
            }

            protected EchoServiceClient() : base()
            {
                checked
                { }
            }

            protected EchoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
            {
                checked
                { }
            }

            protected override EchoServiceClient NewInstance(ClientBaseConfiguration configuration)
            {
                checked
                {
                    return new EchoServiceClient(configuration);
                }
            }

            public virtual Grpc.Core.AsyncUnaryCall<Samples.GrpcExample.SingleMessage> EchoUnary(Samples.GrpcExample.SingleMessage request, Grpc.Core.Metadata? headers = null, System.DateTime? deadline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                checked
                {
                    return EchoUnary(request, new Grpc.Core.CallOptions(headers, deadline, cancellationToken));
                }
            }

            public virtual Grpc.Core.AsyncUnaryCall<Samples.GrpcExample.SingleMessage> EchoUnary(Samples.GrpcExample.SingleMessage request, Grpc.Core.CallOptions options)
            {
                checked
                {
                    return CallInvoker.AsyncUnaryCall(__Method_2367f6e680fe447fa851fb9295a9135b, null, options, request);
                }
            }

            public virtual Grpc.Core.AsyncClientStreamingCall<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.MultiMessage> EchoClientStreaming(Grpc.Core.Metadata? headers = null, System.DateTime? deadline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                checked
                {
                    return EchoClientStreaming(new Grpc.Core.CallOptions(headers, deadline, cancellationToken));
                }
            }

            public virtual Grpc.Core.AsyncClientStreamingCall<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.MultiMessage> EchoClientStreaming(Grpc.Core.CallOptions options)
            {
                checked
                {
                    return CallInvoker.AsyncClientStreamingCall(__Method_738ba60ffb074817be9ebda0cdf30a21, null, options);
                }
            }

            public virtual Grpc.Core.AsyncServerStreamingCall<Samples.GrpcExample.SingleMessage> EchoServerStreaming(Samples.GrpcExample.MultiMessage request, Grpc.Core.Metadata? headers = null, System.DateTime? deadline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                checked
                {
                    return EchoServerStreaming(request, new Grpc.Core.CallOptions(headers, deadline, cancellationToken));
                }
            }

            public virtual Grpc.Core.AsyncServerStreamingCall<Samples.GrpcExample.SingleMessage> EchoServerStreaming(Samples.GrpcExample.MultiMessage request, Grpc.Core.CallOptions options)
            {
                checked
                {
                    return CallInvoker.AsyncServerStreamingCall(__Method_95ffe304446d4c2a946a9eb76dc34349, null, options, request);
                }
            }

            public virtual Grpc.Core.AsyncDuplexStreamingCall<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage> EchoDuplex(Grpc.Core.Metadata? headers = null, System.DateTime? deadline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                checked
                {
                    return EchoDuplex(new Grpc.Core.CallOptions(headers, deadline, cancellationToken));
                }
            }

            public virtual Grpc.Core.AsyncDuplexStreamingCall<Samples.GrpcExample.SingleMessage, Samples.GrpcExample.SingleMessage> EchoDuplex(Grpc.Core.CallOptions options)
            {
                checked
                {
                    return CallInvoker.AsyncDuplexStreamingCall(__Method_b54a1fc9fc1c40dd87920cda084babd7, null, options);
                }
            }

            async Task<Samples.GrpcExample.SingleMessage> IEchoService.EchoUnary(Samples.GrpcExample.SingleMessage request, CancellationToken token)
            {
                checked
                {
                    return await this.EchoUnary(request, cancellationToken: token).ResponseAsync;
                }
            }

            async Task<Samples.GrpcExample.MultiMessage> IEchoService.EchoClientStreaming(System.Threading.Channels.ChannelReader<Samples.GrpcExample.SingleMessage> requestChannel, CancellationToken token)
            {
                checked
                {
                    var call = this.EchoClientStreaming(cancellationToken: token);
                    try
                    {
                        while (await requestChannel.WaitToReadAsync(token))
                        {
                            while (requestChannel.TryRead(out var item))
                            {
                                await call.RequestStream.WriteAsync(item);
                            }

                        }

                    }

                    finally
                    {
                        await call.RequestStream.CompleteAsync();
                    }

                    return await call.ResponseAsync;
                }
            }

            async Task IEchoService.EchoServerStreaming(Samples.GrpcExample.MultiMessage request, System.Threading.Channels.ChannelWriter<Samples.GrpcExample.SingleMessage> responseChannel, CancellationToken token)
            {
                checked
                {
                    var call = this.EchoServerStreaming(request, cancellationToken: token);
                    try
                    {
                        while (await call.ResponseStream.MoveNext(token))
                        {
                            await responseChannel.WriteAsync(call.ResponseStream.Current, token);
                        }

                        responseChannel.Complete();
                    }

                    catch (Exception ex)
                    {
                        responseChannel.TryComplete(ex);
                        throw;
                    }

                }
            }

            async Task IEchoService.EchoDuplex(System.Threading.Channels.ChannelReader<Samples.GrpcExample.SingleMessage> requestChannel, System.Threading.Channels.ChannelWriter<Samples.GrpcExample.SingleMessage> responseChannel, CancellationToken token)
            {
                checked
                {
                    using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token))
                    {
                        var tasks = new List<Task>();
                        var call = this.EchoDuplex(cancellationToken: cts.Token);
                        tasks.Add(Task.Run(async () =>
                        {
                            try
                            {
                                while (await requestChannel.WaitToReadAsync(cts.Token))
                                {
                                    while (requestChannel.TryRead(out var item))
                                    {
                                        await call.RequestStream.WriteAsync(item);
                                    }

                                }

                            }

                            finally
                            {
                                await call.RequestStream.CompleteAsync();
                            }

                        }

                        ));
                        tasks.Add(Task.Run(async () =>
                        {
                            try
                            {
                                while (await call.ResponseStream.MoveNext(cts.Token))
                                {
                                    await responseChannel.WriteAsync(call.ResponseStream.Current, cts.Token);
                                }

                                responseChannel.Complete();
                            }

                            catch (Exception ex)
                            {
                                responseChannel.TryComplete(ex);
                                throw;
                            }

                        }

                        ));
                        try
                        {
                            while (tasks.Count > 0)
                            {
                                Task completedTask = await Task.WhenAny(tasks);
                                tasks.Remove(completedTask);
                                await completedTask;
                            }

                        }

                        finally
                        {
                            cts.Cancel();
                        }

                    }

                }
            }
        }

    }

}

