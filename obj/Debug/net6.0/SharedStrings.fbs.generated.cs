
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 6.2.1.LhLilFwQP8wqgUd+Ob0o9NR6aqvBQtf+9fAC/ekqk5s=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_bdade0c319654296b1817bb0a8c210a7
    {
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SharedStrings.Cell? Clone(global::Samples.SharedStrings.Cell? item)
        {
            checked
            {
                return item is null ? null : new Samples.SharedStrings.Cell(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.String? Clone(global::System.String? item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<System.String>? Clone(global::System.Collections.Generic.IList<System.String>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<System.String>(item, FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SharedStrings.Matrix? Clone(global::Samples.SharedStrings.Matrix? item)
        {
            checked
            {
                return item is null ? null : new Samples.SharedStrings.Matrix(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Samples.SharedStrings.Row>? Clone(global::System.Collections.Generic.IList<Samples.SharedStrings.Row>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.SharedStrings.Row>(item, FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SharedStrings.Row? Clone(global::Samples.SharedStrings.Row? item)
        {
            checked
            {
                return item is null ? null : new Samples.SharedStrings.Row(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Samples.SharedStrings.Cell>? Clone(global::System.Collections.Generic.IList<Samples.SharedStrings.Cell>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.SharedStrings.Cell>(item, FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone);
            }
        }
    }

}

namespace Samples.SharedStrings
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Cell
        : object
    {
#pragma warning disable CS8618
        public Cell()
        {
            checked
            {
                this.ColumnName = default!;
                this.Value = default!;
                this.Vector = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Cell(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Cell(Cell source)
        {
            checked
            {
                this.ColumnName = FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone(source.ColumnName);
                this.Value = FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone(source.Value);
                this.Vector = FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone(source.Vector);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0, SharedString = true)]
        public virtual string? ColumnName { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual string? Value { get; set; }

        [FlatBufferItemAttribute(2, SharedString = true)]
        public virtual IList<string>? Vector { get; set; }
    }

}

namespace Samples.SharedStrings
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Matrix
        : object
        , IFlatBufferSerializable<Samples.SharedStrings.Matrix>
    {
#pragma warning disable CS8618
        public Matrix()
        {
            checked
            {
                this.Rows = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Matrix(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Matrix(Matrix source)
        {
            checked
            {
                this.Rows = FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone(source.Rows);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual IList<Samples.SharedStrings.Row>? Rows { get; set; }
        public static ISerializer<Samples.SharedStrings.Matrix> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.SharedStrings.Matrix> IFlatBufferSerializable<Samples.SharedStrings.Matrix>.Serializer => Serializer;

        #region Serializer for Samples.SharedStrings.Matrix

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.SharedStrings.Matrix>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.1";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.GreedyMutable;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.SharedStrings.Matrix root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_32d957d0f266417ebebdc34926c73cd3(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.SharedStrings.Matrix root)
            {
                checked
                {
                    return GetMaxSizeOf_32d957d0f266417ebebdc34926c73cd3(root);
                }
            }

            public global::Samples.SharedStrings.Matrix Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_32d957d0f266417ebebdc34926c73cd3(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_32d957d0f266417ebebdc34926c73cd3(global::Samples.SharedStrings.Matrix value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.Rows;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_da6b9652912448bc91d32e6e8304466b(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SharedStrings.Matrix Read_32d957d0f266417ebebdc34926c73cd3<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_9921a40eaaf64ca38f83cc0e82b5df8d<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_9921a40eaaf64ca38f83cc0e82b5df8d<TInputBuffer>
                : global::Samples.SharedStrings.Matrix
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.Collections.Generic.IList<Samples.SharedStrings.Row>? __index0Value;

                public static tableReader_9921a40eaaf64ca38f83cc0e82b5df8d<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_9921a40eaaf64ca38f83cc0e82b5df8d<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_9921a40eaaf64ca38f83cc0e82b5df8d(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SharedStrings.Matrix);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.Collections.Generic.IList<Samples.SharedStrings.Row>? Rows
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.SharedStrings.Row>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_da6b9652912448bc91d32e6e8304466b(buffer, absoluteLocation, tableMetadata_17a0bc663fe146169c9083a3c9871cf3.Rows);
                    }
                }
            }



            private static void WriteInlineValueOf_32d957d0f266417ebebdc34926c73cd3<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SharedStrings.Matrix value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.Rows;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 6;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_da6b9652912448bc91d32e6e8304466b(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_17a0bc663fe146169c9083a3c9871cf3
            {

                public static readonly TableFieldContext Rows = new TableFieldContext(
                    "Samples.SharedStrings.Matrix.Rows",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_da6b9652912448bc91d32e6e8304466b(global::System.Collections.Generic.IList<Samples.SharedStrings.Row> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Samples.SharedStrings.Row[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_9d6d18bc7ef844b1b57dd975c7bf6fae(current);
                        }
                    }
                    else if (value is List<Samples.SharedStrings.Row> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_9d6d18bc7ef844b1b57dd975c7bf6fae(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_9d6d18bc7ef844b1b57dd975c7bf6fae(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Samples.SharedStrings.Row> Read_da6b9652912448bc91d32e6e8304466b<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_a48a712e558e4196b92b002b19b94d3b<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_a48a712e558e4196b92b002b19b94d3b<TInputBuffer> : FlatBufferVector<global::Samples.SharedStrings.Row, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_a48a712e558e4196b92b002b19b94d3b(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SharedStrings.Row item)
                {
                    checked
                    {
                        item = Read_9d6d18bc7ef844b1b57dd975c7bf6fae(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SharedStrings.Row item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_da6b9652912448bc91d32e6e8304466b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.SharedStrings.Row> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.SharedStrings.Row[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_9d6d18bc7ef844b1b57dd975c7bf6fae(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Samples.SharedStrings.Row> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_9d6d18bc7ef844b1b57dd975c7bf6fae(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_9d6d18bc7ef844b1b57dd975c7bf6fae(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_9d6d18bc7ef844b1b57dd975c7bf6fae(global::Samples.SharedStrings.Row value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.Values;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_d36e0d00e1044d3e958dc16a65c61b9e(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SharedStrings.Row Read_9d6d18bc7ef844b1b57dd975c7bf6fae<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_3ef2e3e0a02a46eeacebc9e55c945879<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_3ef2e3e0a02a46eeacebc9e55c945879<TInputBuffer>
                : global::Samples.SharedStrings.Row
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.Collections.Generic.IList<Samples.SharedStrings.Cell>? __index0Value;

                public static tableReader_3ef2e3e0a02a46eeacebc9e55c945879<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_3ef2e3e0a02a46eeacebc9e55c945879<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_3ef2e3e0a02a46eeacebc9e55c945879(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SharedStrings.Row);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.Collections.Generic.IList<Samples.SharedStrings.Cell>? Values
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.SharedStrings.Cell>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_d36e0d00e1044d3e958dc16a65c61b9e(buffer, absoluteLocation, tableMetadata_54c618c9035548049ccedb94010cd2b7.Values);
                    }
                }
            }



            private static void WriteInlineValueOf_9d6d18bc7ef844b1b57dd975c7bf6fae<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SharedStrings.Row value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.Values;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 6;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_d36e0d00e1044d3e958dc16a65c61b9e(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_54c618c9035548049ccedb94010cd2b7
            {

                public static readonly TableFieldContext Values = new TableFieldContext(
                    "Samples.SharedStrings.Row.Values",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_d36e0d00e1044d3e958dc16a65c61b9e(global::System.Collections.Generic.IList<Samples.SharedStrings.Cell> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Samples.SharedStrings.Cell[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_0361f2564a4d4680a930a01f452a7608(current);
                        }
                    }
                    else if (value is List<Samples.SharedStrings.Cell> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_0361f2564a4d4680a930a01f452a7608(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_0361f2564a4d4680a930a01f452a7608(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Samples.SharedStrings.Cell> Read_d36e0d00e1044d3e958dc16a65c61b9e<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_b468743ce682413087cb0ccd9a664878<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_b468743ce682413087cb0ccd9a664878<TInputBuffer> : FlatBufferVector<global::Samples.SharedStrings.Cell, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_b468743ce682413087cb0ccd9a664878(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SharedStrings.Cell item)
                {
                    checked
                    {
                        item = Read_0361f2564a4d4680a930a01f452a7608(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SharedStrings.Cell item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_d36e0d00e1044d3e958dc16a65c61b9e<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.SharedStrings.Cell> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.SharedStrings.Cell[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_0361f2564a4d4680a930a01f452a7608(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Samples.SharedStrings.Cell> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_0361f2564a4d4680a930a01f452a7608(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_0361f2564a4d4680a930a01f452a7608(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_0361f2564a4d4680a930a01f452a7608(global::Samples.SharedStrings.Cell value)
            {
                checked
                {

                    int runningSum = 28 + 11;
                    var index0Value = value.ColumnName;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_68ee785ba8db416f8683c4a76f6a9be8(index0Value);
                    }
                    var index1Value = value.Value;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_68ee785ba8db416f8683c4a76f6a9be8(index1Value);
                    }
                    var index2Value = value.Vector;

                    if (!(index2Value is null))
                    {
                        runningSum += GetMaxSizeOf_e68246c849d94c9bb4bd280ef8186fbe(index2Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SharedStrings.Cell Read_0361f2564a4d4680a930a01f452a7608<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_a63f3918d9fa4b0ab80aaabb6de9d672<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_a63f3918d9fa4b0ab80aaabb6de9d672<TInputBuffer>
                : global::Samples.SharedStrings.Cell
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.String? __index1Value;
                private System.Collections.Generic.IList<System.String>? __index2Value;

                public static tableReader_a63f3918d9fa4b0ab80aaabb6de9d672<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_a63f3918d9fa4b0ab80aaabb6de9d672<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_a63f3918d9fa4b0ab80aaabb6de9d672(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable);
                        this.__index2Value = ReadIndex2Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SharedStrings.Cell);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? ColumnName
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.String? Value
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<System.String>? Vector
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_68ee785ba8db416f8683c4a76f6a9be8(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_68ee785ba8db416f8683c4a76f6a9be8(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<System.String>? ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 2);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_e68246c849d94c9bb4bd280ef8186fbe(buffer, absoluteLocation, tableMetadata_e3d200be451d4d76a27b894bab060ac4.Vector);
                    }
                }
            }



            private static void WriteInlineValueOf_0361f2564a4d4680a930a01f452a7608<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SharedStrings.Cell value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(25, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[10];

                    var index0Value = value.ColumnName;
                    var index1Value = value.Value;
                    var index2Value = value.Vector;

                    var index2Offset = tableStart;
                    if (!(index2Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index2Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 10;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;


                        if (8 > vtableLength)
                        {
                            vtableLength = 8;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 25 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index2Offset != tableStart)
                    {


                        WriteInlineValueOf_e68246c849d94c9bb4bd280ef8186fbe(spanWriter, span, index2Value!, index2Offset, context, tableMetadata_e3d200be451d4d76a27b894bab060ac4.Vector);

                    }


                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_68ee785ba8db416f8683c4a76f6a9be8(spanWriter, span, index1Value!, index1Offset, context, tableMetadata_e3d200be451d4d76a27b894bab060ac4.Value);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_68ee785ba8db416f8683c4a76f6a9be8(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_e3d200be451d4d76a27b894bab060ac4.ColumnName);

                    }

                }
            }

            private static class tableMetadata_e3d200be451d4d76a27b894bab060ac4
            {

                public static readonly TableFieldContext ColumnName = new TableFieldContext(
                    "Samples.SharedStrings.Cell.ColumnName",
                    true,
                    false);

                public static readonly TableFieldContext Value = new TableFieldContext(
                    "Samples.SharedStrings.Cell.Value",
                    false,
                    false);

                public static readonly TableFieldContext Vector = new TableFieldContext(
                    "Samples.SharedStrings.Cell.Vector",
                    true,
                    false);
            }



            private static int GetMaxSizeOf_68ee785ba8db416f8683c4a76f6a9be8(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_68ee785ba8db416f8683c4a76f6a9be8<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_68ee785ba8db416f8683c4a76f6a9be8<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    if (fieldContext.SharedString)
                    {
                        var sharedStringWriter = context.SharedStringWriter;
                        if (!(sharedStringWriter is null))
                        {
                            sharedStringWriter.WriteSharedString(
                                spanWriter,
                                span,
                                offset,
                                value,
                                context);

                            return;
                        }
                    }

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }

            private static int GetMaxSizeOf_e68246c849d94c9bb4bd280ef8186fbe(global::System.Collections.Generic.IList<System.String> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_68ee785ba8db416f8683c4a76f6a9be8(current);
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_68ee785ba8db416f8683c4a76f6a9be8(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_68ee785ba8db416f8683c4a76f6a9be8(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<System.String> Read_e68246c849d94c9bb4bd280ef8186fbe<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_7e968283b1d74ef88f3eeaa539c1bd41<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_7e968283b1d74ef88f3eeaa539c1bd41<TInputBuffer> : FlatBufferVector<global::System.String, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_7e968283b1d74ef88f3eeaa539c1bd41(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::System.String item)
                {
                    checked
                    {
                        item = Read_68ee785ba8db416f8683c4a76f6a9be8(memory, offset);
                    }
                }

                protected override void WriteThrough(global::System.String item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_e68246c849d94c9bb4bd280ef8186fbe<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<System.String> value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is System.String[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_68ee785ba8db416f8683c4a76f6a9be8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<System.String> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_68ee785ba8db416f8683c4a76f6a9be8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_68ee785ba8db416f8683c4a76f6a9be8(spanWriter, span, current, vectorOffset, context, fieldContext);
                            vectorOffset += 4;
                        }
                    }
                }
            }
        }

        #endregion
    }

}

namespace Samples.SharedStrings
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Row
        : object
    {
#pragma warning disable CS8618
        public Row()
        {
            checked
            {
                this.Values = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Row(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Row(Row source)
        {
            checked
            {
                this.Values = FlatSharp.Compiler.Generated.CloneHelpers_bdade0c319654296b1817bb0a8c210a7.Clone(source.Values);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual IList<Samples.SharedStrings.Cell>? Values { get; set; }
    }

}

