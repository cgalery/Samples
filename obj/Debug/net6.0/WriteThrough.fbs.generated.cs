
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 6.2.0.CWHBsUVC9ynMqCSLACLkSM3tDN7P5htjoBTUFaoY4Q0=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_a668b341536c4f85a6f3081d92015eca
    {
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.WriteThrough.Block? Clone(global::Samples.WriteThrough.Block? item)
        {
            checked
            {
                return item is null ? null : new Samples.WriteThrough.Block(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.UInt64 Clone(global::System.UInt64 item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.WriteThrough.BloomFilter? Clone(global::Samples.WriteThrough.BloomFilter? item)
        {
            checked
            {
                return item is null ? null : new Samples.WriteThrough.BloomFilter(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Samples.WriteThrough.Block>? Clone(global::System.Collections.Generic.IList<Samples.WriteThrough.Block>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.WriteThrough.Block>(item, FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.WriteThrough.MutableInt Clone(global::Samples.WriteThrough.MutableInt item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Int32 Clone(global::System.Int32 item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.WriteThrough.Path? Clone(global::Samples.WriteThrough.Path? item)
        {
            checked
            {
                return item is null ? null : new Samples.WriteThrough.Path(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Samples.WriteThrough.Point>? Clone(global::System.Collections.Generic.IList<Samples.WriteThrough.Point>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.WriteThrough.Point>(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.WriteThrough.Point Clone(global::Samples.WriteThrough.Point item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Single Clone(global::System.Single item)
        {
            checked
            {
                return item;
            }
        }
    }

}

namespace Samples.WriteThrough
{
    [FlatBufferStruct]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Block
    {
#pragma warning disable CS8618
        public Block()
        {
            checked
            {
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Block(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Block(Block source)
        {
            checked
            {
                this.__flatsharp__Data_0 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_0);
                this.__flatsharp__Data_1 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_1);
                this.__flatsharp__Data_2 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_2);
                this.__flatsharp__Data_3 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_3);
                this.__flatsharp__Data_4 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_4);
                this.__flatsharp__Data_5 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_5);
                this.__flatsharp__Data_6 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_6);
                this.__flatsharp__Data_7 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_7);
                this.__flatsharp__Data_8 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_8);
                this.__flatsharp__Data_9 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_9);
                this.__flatsharp__Data_10 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_10);
                this.__flatsharp__Data_11 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_11);
                this.__flatsharp__Data_12 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_12);
                this.__flatsharp__Data_13 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_13);
                this.__flatsharp__Data_14 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_14);
                this.__flatsharp__Data_15 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.__flatsharp__Data_15);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[0]")]
        protected virtual ulong __flatsharp__Data_0 { get; set; }

        [FlatBufferItemAttribute(1, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[1]")]
        protected virtual ulong __flatsharp__Data_1 { get; set; }

        [FlatBufferItemAttribute(2, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[2]")]
        protected virtual ulong __flatsharp__Data_2 { get; set; }

        [FlatBufferItemAttribute(3, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[3]")]
        protected virtual ulong __flatsharp__Data_3 { get; set; }

        [FlatBufferItemAttribute(4, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[4]")]
        protected virtual ulong __flatsharp__Data_4 { get; set; }

        [FlatBufferItemAttribute(5, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[5]")]
        protected virtual ulong __flatsharp__Data_5 { get; set; }

        [FlatBufferItemAttribute(6, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[6]")]
        protected virtual ulong __flatsharp__Data_6 { get; set; }

        [FlatBufferItemAttribute(7, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[7]")]
        protected virtual ulong __flatsharp__Data_7 { get; set; }

        [FlatBufferItemAttribute(8, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[8]")]
        protected virtual ulong __flatsharp__Data_8 { get; set; }

        [FlatBufferItemAttribute(9, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[9]")]
        protected virtual ulong __flatsharp__Data_9 { get; set; }

        [FlatBufferItemAttribute(10, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[10]")]
        protected virtual ulong __flatsharp__Data_10 { get; set; }

        [FlatBufferItemAttribute(11, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[11]")]
        protected virtual ulong __flatsharp__Data_11 { get; set; }

        [FlatBufferItemAttribute(12, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[12]")]
        protected virtual ulong __flatsharp__Data_12 { get; set; }

        [FlatBufferItemAttribute(13, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[13]")]
        protected virtual ulong __flatsharp__Data_13 { get; set; }

        [FlatBufferItemAttribute(14, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[14]")]
        protected virtual ulong __flatsharp__Data_14 { get; set; }

        [FlatBufferItemAttribute(15, WriteThrough = true)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Data[15]")]
        protected virtual ulong __flatsharp__Data_15 { get; set; }
        private __Data_Vector? __Data;

        public __Data_Vector Data => (__Data ??= new __Data_Vector(this));

        public partial class __Data_Vector : System.Collections.Generic.IEnumerable<ulong>
        {
            private readonly Samples.WriteThrough.Block item;

            public __Data_Vector(Samples.WriteThrough.Block item)
            {
                checked
                {
                    this.item = item;
                }
            }

            public int Count => 16;

            public ulong this[int index]
            {
                get
                {
                    checked
                    {
                        var thisItem = this.item;
                        switch (index)
                        {
                            case 0: return thisItem.__flatsharp__Data_0;
                            case 1: return thisItem.__flatsharp__Data_1;
                            case 2: return thisItem.__flatsharp__Data_2;
                            case 3: return thisItem.__flatsharp__Data_3;
                            case 4: return thisItem.__flatsharp__Data_4;
                            case 5: return thisItem.__flatsharp__Data_5;
                            case 6: return thisItem.__flatsharp__Data_6;
                            case 7: return thisItem.__flatsharp__Data_7;
                            case 8: return thisItem.__flatsharp__Data_8;
                            case 9: return thisItem.__flatsharp__Data_9;
                            case 10: return thisItem.__flatsharp__Data_10;
                            case 11: return thisItem.__flatsharp__Data_11;
                            case 12: return thisItem.__flatsharp__Data_12;
                            case 13: return thisItem.__flatsharp__Data_13;
                            case 14: return thisItem.__flatsharp__Data_14;
                            case 15: return thisItem.__flatsharp__Data_15;
                            default: throw new IndexOutOfRangeException();
                        }

                    }
                }

                set
                {
                    checked
                    {
                        var thisItem = this.item;
                        switch (index)
                        {
                            case 0: thisItem.__flatsharp__Data_0 = value; break;
                            case 1: thisItem.__flatsharp__Data_1 = value; break;
                            case 2: thisItem.__flatsharp__Data_2 = value; break;
                            case 3: thisItem.__flatsharp__Data_3 = value; break;
                            case 4: thisItem.__flatsharp__Data_4 = value; break;
                            case 5: thisItem.__flatsharp__Data_5 = value; break;
                            case 6: thisItem.__flatsharp__Data_6 = value; break;
                            case 7: thisItem.__flatsharp__Data_7 = value; break;
                            case 8: thisItem.__flatsharp__Data_8 = value; break;
                            case 9: thisItem.__flatsharp__Data_9 = value; break;
                            case 10: thisItem.__flatsharp__Data_10 = value; break;
                            case 11: thisItem.__flatsharp__Data_11 = value; break;
                            case 12: thisItem.__flatsharp__Data_12 = value; break;
                            case 13: thisItem.__flatsharp__Data_13 = value; break;
                            case 14: thisItem.__flatsharp__Data_14 = value; break;
                            case 15: thisItem.__flatsharp__Data_15 = value; break;
                            default: throw new IndexOutOfRangeException();
                        }

                    }
                }
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();

            public System.Collections.Generic.IEnumerator<ulong> GetEnumerator()
            {
                checked
                {
                    var thisItem = this.item;
                    yield return thisItem.__flatsharp__Data_0;
                    yield return thisItem.__flatsharp__Data_1;
                    yield return thisItem.__flatsharp__Data_2;
                    yield return thisItem.__flatsharp__Data_3;
                    yield return thisItem.__flatsharp__Data_4;
                    yield return thisItem.__flatsharp__Data_5;
                    yield return thisItem.__flatsharp__Data_6;
                    yield return thisItem.__flatsharp__Data_7;
                    yield return thisItem.__flatsharp__Data_8;
                    yield return thisItem.__flatsharp__Data_9;
                    yield return thisItem.__flatsharp__Data_10;
                    yield return thisItem.__flatsharp__Data_11;
                    yield return thisItem.__flatsharp__Data_12;
                    yield return thisItem.__flatsharp__Data_13;
                    yield return thisItem.__flatsharp__Data_14;
                    yield return thisItem.__flatsharp__Data_15;
                }
            }

            /// <summary>
            /// Deep copies the first 16 items from the source into this struct vector.
            /// </summary>
            public void CopyFrom(ReadOnlySpan<ulong> source)
            {
                checked
                {
                    var thisItem = this.item;
                    var s = source;
                    thisItem.__flatsharp__Data_15 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[15]);
                    thisItem.__flatsharp__Data_14 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[14]);
                    thisItem.__flatsharp__Data_13 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[13]);
                    thisItem.__flatsharp__Data_12 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[12]);
                    thisItem.__flatsharp__Data_11 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[11]);
                    thisItem.__flatsharp__Data_10 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[10]);
                    thisItem.__flatsharp__Data_9 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[9]);
                    thisItem.__flatsharp__Data_8 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[8]);
                    thisItem.__flatsharp__Data_7 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[7]);
                    thisItem.__flatsharp__Data_6 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[6]);
                    thisItem.__flatsharp__Data_5 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[5]);
                    thisItem.__flatsharp__Data_4 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[4]);
                    thisItem.__flatsharp__Data_3 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[3]);
                    thisItem.__flatsharp__Data_2 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[2]);
                    thisItem.__flatsharp__Data_1 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[1]);
                    thisItem.__flatsharp__Data_0 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[0]);
                }
            }

            /// <summary>
            /// Deep copies the first 16 items from the source into this struct vector.
            /// </summary>
            public void CopyFrom(IReadOnlyList<ulong> source)
            {
                checked
                {
                    var thisItem = this.item;
                    var s = source;
                    thisItem.__flatsharp__Data_15 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[15]);
                    thisItem.__flatsharp__Data_14 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[14]);
                    thisItem.__flatsharp__Data_13 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[13]);
                    thisItem.__flatsharp__Data_12 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[12]);
                    thisItem.__flatsharp__Data_11 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[11]);
                    thisItem.__flatsharp__Data_10 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[10]);
                    thisItem.__flatsharp__Data_9 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[9]);
                    thisItem.__flatsharp__Data_8 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[8]);
                    thisItem.__flatsharp__Data_7 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[7]);
                    thisItem.__flatsharp__Data_6 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[6]);
                    thisItem.__flatsharp__Data_5 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[5]);
                    thisItem.__flatsharp__Data_4 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[4]);
                    thisItem.__flatsharp__Data_3 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[3]);
                    thisItem.__flatsharp__Data_2 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[2]);
                    thisItem.__flatsharp__Data_1 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[1]);
                    thisItem.__flatsharp__Data_0 = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(s[0]);
                }
            }
        }

    }

}

namespace Samples.WriteThrough
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class BloomFilter
        : object
        , IFlatBufferSerializable<Samples.WriteThrough.BloomFilter>
    {
#pragma warning disable CS8618
        protected BloomFilter(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public BloomFilter(BloomFilter source)
        {
            checked
            {
                this.Blocks = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.Blocks);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0, Required = true)]
        public virtual IList<Samples.WriteThrough.Block> Blocks { get; set; }
        public static ISerializer<Samples.WriteThrough.BloomFilter> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.WriteThrough.BloomFilter> IFlatBufferSerializable<Samples.WriteThrough.BloomFilter>.Serializer => Serializer;

        #region Serializer for Samples.WriteThrough.BloomFilter

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.Lazy)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.WriteThrough.BloomFilter>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.0";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.Lazy;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.WriteThrough.BloomFilter root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_6edcc4c0f4fa42ef8d36fe8c3760bfac(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.WriteThrough.BloomFilter root)
            {
                checked
                {
                    return GetMaxSizeOf_6edcc4c0f4fa42ef8d36fe8c3760bfac(root);
                }
            }

            public global::Samples.WriteThrough.BloomFilter Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_6edcc4c0f4fa42ef8d36fe8c3760bfac(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_6edcc4c0f4fa42ef8d36fe8c3760bfac(global::Samples.WriteThrough.BloomFilter value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.Blocks;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_7fe94b0173464aa0b23823e6c50cbd24(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.WriteThrough.BloomFilter Read_6edcc4c0f4fa42ef8d36fe8c3760bfac<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_b12dfd8faa2a4f6aabba141335f958ea<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_b12dfd8faa2a4f6aabba141335f958ea<TInputBuffer>
                : global::Samples.WriteThrough.BloomFilter
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



                private TInputBuffer __buffer;
                private int __offset;
                private VTable4 __vtable;

                public static tableReader_b12dfd8faa2a4f6aabba141335f958ea<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_b12dfd8faa2a4f6aabba141335f958ea<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_b12dfd8faa2a4f6aabba141335f958ea(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.WriteThrough.BloomFilter);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;


                public override System.Collections.Generic.IList<Samples.WriteThrough.Block> Blocks
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable);
                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.WriteThrough.Block> ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                throw new global::System.IO.InvalidDataException("Table property 'Samples.WriteThrough.BloomFilter.Blocks' is marked as required, but was missing from the buffer.");
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_7fe94b0173464aa0b23823e6c50cbd24(buffer, absoluteLocation, tableMetadata_0a55c09f81a044cb8f3e2bce23f1d82c.Blocks);
                    }
                }
            }



            private static void WriteInlineValueOf_6edcc4c0f4fa42ef8d36fe8c3760bfac<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.WriteThrough.BloomFilter value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 6;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.Blocks;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                    }
                    else
                    {
                        throw new System.InvalidOperationException("Table property 'Samples.WriteThrough.BloomFilter.Blocks' is marked as required, but was not set.");
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_7fe94b0173464aa0b23823e6c50cbd24(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_0a55c09f81a044cb8f3e2bce23f1d82c
            {

                public static readonly TableFieldContext Blocks = new TableFieldContext(
                    "Samples.WriteThrough.BloomFilter.Blocks",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_7fe94b0173464aa0b23823e6c50cbd24(global::System.Collections.Generic.IList<Samples.WriteThrough.Block> value)
            {
                checked
                {
                    return 14 + (128 * value.Count);
                }
            }

            private static global::System.Collections.Generic.IList<Samples.WriteThrough.Block> Read_7fe94b0173464aa0b23823e6c50cbd24<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new FlatBufferVector_e360700e0cfc4227a4a776f3008e9f30<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    128,
                    fieldContext);
                }
            }

            public sealed class FlatBufferVector_e360700e0cfc4227a4a776f3008e9f30<TInputBuffer> : FlatBufferVector<global::Samples.WriteThrough.Block, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_e360700e0cfc4227a4a776f3008e9f30(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.WriteThrough.Block item)
                {
                    checked
                    {
                        item = Read_a7d103691fc14abbb017f2c2e14c5fc3(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.WriteThrough.Block item, Span<byte> data)
                {
                    checked
                    {
                        WriteInlineValueOf_a7d103691fc14abbb017f2c2e14c5fc3(default(SpanWriter), data, item, 0);
                    }
                }
            }



            private static void WriteInlineValueOf_7fe94b0173464aa0b23823e6c50cbd24<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.WriteThrough.Block> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(8, count, 128);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.WriteThrough.Block[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_a7d103691fc14abbb017f2c2e14c5fc3(spanWriter, span, current, vectorOffset);
                            vectorOffset += 128;
                        }
                    }
                    else if (value is List<Samples.WriteThrough.Block> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_a7d103691fc14abbb017f2c2e14c5fc3(spanWriter, span, current, vectorOffset);
                            vectorOffset += 128;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_a7d103691fc14abbb017f2c2e14c5fc3(spanWriter, span, current, vectorOffset);
                            vectorOffset += 128;
                        }
                    }
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_a7d103691fc14abbb017f2c2e14c5fc3(global::Samples.WriteThrough.Block value)
            {
                checked
                {
                    return 135;
                }
            }

            private static global::Samples.WriteThrough.Block Read_a7d103691fc14abbb017f2c2e14c5fc3<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return structReader_c92fb43f6b5b4291b34e30f38f0cef96<TInputBuffer>.GetOrCreate(buffer, offset);
                }
            }

            private sealed class structReader_c92fb43f6b5b4291b34e30f38f0cef96<TInputBuffer>
                : global::Samples.WriteThrough.Block
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



                private TInputBuffer __buffer;
                private int __offset;

                public static structReader_c92fb43f6b5b4291b34e30f38f0cef96<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new structReader_c92fb43f6b5b4291b34e30f38f0cef96<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private structReader_c92fb43f6b5b4291b34e30f38f0cef96(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.WriteThrough.Block);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;


                protected override System.UInt64 __flatsharp__Data_0
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex0Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex0Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_1
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex1Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex1Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_2
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex2Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex2Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_3
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex3Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex3Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_4
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex4Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex4Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_5
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex5Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex5Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_6
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex6Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex6Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_7
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex7Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex7Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_8
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex8Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex8Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_9
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex9Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex9Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_10
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex10Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex10Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_11
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex11Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex11Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_12
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex12Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex12Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_13
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex13Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex13Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_14
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex14Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex14Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                protected override System.UInt64 __flatsharp__Data_15
                {
                    get
                    {
                        checked
                        {
                            return ReadIndex15Value(this.__buffer, this.__offset, default);
                        }
                    }

                    set
                    {
                        checked
                        {
                            WriteIndex15Value(this.__buffer, __offset, value, default);
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 0);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 0);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 8);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 8);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 16);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 16);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex3Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 24);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex3Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 24);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex4Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 32);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex4Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 32);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex5Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 40);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex5Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 40);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex6Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 48);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex6Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 48);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex7Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 56);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex7Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 56);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex8Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 64);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex8Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 64);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex9Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 72);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex9Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 72);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex10Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 80);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex10Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 80);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex11Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 88);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex11Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 88);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex12Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 96);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex12Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 96);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex13Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 104);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex13Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 104);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex14Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 112);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex14Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 112);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt64 ReadIndex15Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {
                        return Read_b147f13e3ec34bafb38e30eecf238fce(buffer, offset + 120);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex15Value(
                    TInputBuffer buffer,
                    int offset,
                    System.UInt64 value,
                    VTable4 vtable)
                {
                    checked
                    {
                        WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(default(SpanWriter), buffer.AsSpan(), value, offset + 120);
                    }
                }
            }



            private static void WriteInlineValueOf_a7d103691fc14abbb017f2c2e14c5fc3<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.WriteThrough.Block value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    Span<byte> scopedSpan = span.Slice(offset, 128);

                    if (value is null)
                    {
                        scopedSpan.Clear();
                        return;
                    }

                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[0], 0);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[1], 8);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[2], 16);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[3], 24);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[4], 32);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[5], 40);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[6], 48);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[7], 56);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[8], 64);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[9], 72);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[10], 80);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[11], 88);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[12], 96);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[13], 104);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[14], 112);
                    WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce(spanWriter, scopedSpan, value.Data[15], 120);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_b147f13e3ec34bafb38e30eecf238fce(global::System.UInt64 value)
            {
                checked
                {
                    return 15;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.UInt64 Read_b147f13e3ec34bafb38e30eecf238fce<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadULong(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_b147f13e3ec34bafb38e30eecf238fce<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.UInt64 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteULong(span, value, offset);
                }
            }
        }

        #endregion
    }

}

namespace Samples.WriteThrough
{
    [FlatBufferStruct()]
    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit, Size = 4)]
    public partial struct MutableInt
    {
        [System.Runtime.InteropServices.FieldOffset(0)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Value")]
        public int Value;

    }

}

namespace Samples.WriteThrough
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Path
        : object
        , IFlatBufferSerializable<Samples.WriteThrough.Path>
    {
#pragma warning disable CS8618
        public Path()
        {
            checked
            {
                this.Points = default!;
                this.NumPoints = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Path(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Path(Path source)
        {
            checked
            {
                this.Points = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.Points);
                this.NumPoints = FlatSharp.Compiler.Generated.CloneHelpers_a668b341536c4f85a6f3081d92015eca.Clone(source.NumPoints);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0, WriteThrough = true)]
        public virtual IList<Samples.WriteThrough.Point>? Points { get; set; }

        [FlatBufferItemAttribute(1, Required = true, WriteThrough = true)]
        public virtual Samples.WriteThrough.MutableInt NumPoints { get; set; }
        public static ISerializer<Samples.WriteThrough.Path> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.WriteThrough.Path> IFlatBufferSerializable<Samples.WriteThrough.Path>.Serializer => Serializer;

        #region Serializer for Samples.WriteThrough.Path

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.Progressive)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.WriteThrough.Path>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.0";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.Progressive;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.WriteThrough.Path root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_55ce7ff0fe2745908c91aaf4a7dc56c4(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.WriteThrough.Path root)
            {
                checked
                {
                    return GetMaxSizeOf_55ce7ff0fe2745908c91aaf4a7dc56c4(root);
                }
            }

            public global::Samples.WriteThrough.Path Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_55ce7ff0fe2745908c91aaf4a7dc56c4(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_55ce7ff0fe2745908c91aaf4a7dc56c4(global::Samples.WriteThrough.Path value)
            {
                checked
                {

                    int runningSum = 21 + 9;
                    var index0Value = value.Points;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_e2c85fec21b14bc5a52bb6b80eba0b60(index0Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.WriteThrough.Path Read_55ce7ff0fe2745908c91aaf4a7dc56c4<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_06a3ba8916e640019a30f0aefaa04b4e<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_06a3ba8916e640019a30f0aefaa04b4e<TInputBuffer>
                : global::Samples.WriteThrough.Path
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



                private TInputBuffer __buffer;
                private int __offset;
                private VTable4 __vtable;
                private byte __mask0;
                private System.Collections.Generic.IList<Samples.WriteThrough.Point>? __index0Value;
                private Samples.WriteThrough.MutableInt __index1Value;

                public static tableReader_06a3ba8916e640019a30f0aefaa04b4e<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_06a3ba8916e640019a30f0aefaa04b4e<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_06a3ba8916e640019a30f0aefaa04b4e(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.WriteThrough.Path);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;


                public override System.Collections.Generic.IList<Samples.WriteThrough.Point>? Points
                {
                    get
                    {
                        checked
                        {

                            if ((this.__mask0 & (byte)1) == 0)
                            {
                                this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable);
                                this.__mask0 |= (byte)1;
                            }
                            return this.__index0Value;

                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                public override Samples.WriteThrough.MutableInt NumPoints
                {
                    get
                    {
                        checked
                        {

                            if ((this.__mask0 & (byte)2) == 0)
                            {
                                this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable);
                                this.__mask0 |= (byte)2;
                            }
                            return this.__index1Value;

                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                            this.__mask0 |= (byte)2;
                            WriteIndex1Value(this.__buffer, __offset, value, this.__vtable);
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.WriteThrough.Point>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_e2c85fec21b14bc5a52bb6b80eba0b60(buffer, absoluteLocation, tableMetadata_d1bd93dd41774ecd9fcfde15fd2bfc79.Points);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.WriteThrough.MutableInt ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                throw new global::System.IO.InvalidDataException("Table property 'Samples.WriteThrough.Path.NumPoints' is marked as required, but was missing from the buffer.");
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_a42e042b181247fdac0828dc10a2a1ba(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static void WriteIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    Samples.WriteThrough.MutableInt value,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                throw new global::System.IO.InvalidDataException("Table property 'Samples.WriteThrough.Path.NumPoints' is marked as required, but was missing from the buffer.");
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        WriteInlineValueOf_a42e042b181247fdac0828dc10a2a1ba(default(SpanWriter), buffer.AsSpan(), value, absoluteLocation);
                    }
                }
            }



            private static void WriteInlineValueOf_55ce7ff0fe2745908c91aaf4a7dc56c4<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.WriteThrough.Path value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(18, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 8;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.Points;
                    var index1Value = value.NumPoints;

                    var index1Offset = tableStart;
                    if (true)
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;


                        WriteInlineValueOf_a42e042b181247fdac0828dc10a2a1ba(spanWriter, span, index1Value, index1Offset);


                    }
                    else
                    {
                        throw new System.InvalidOperationException("Table property 'Samples.WriteThrough.Path.NumPoints' is marked as required, but was not set.");
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 18 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_e2c85fec21b14bc5a52bb6b80eba0b60(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_d1bd93dd41774ecd9fcfde15fd2bfc79
            {

                public static readonly TableFieldContext Points = new TableFieldContext(
                    "Samples.WriteThrough.Path.Points",
                    false,
                    true);

                public static readonly TableFieldContext NumPoints = new TableFieldContext(
                    "Samples.WriteThrough.Path.NumPoints",
                    false,
                    true);
            }



            private static int GetMaxSizeOf_e2c85fec21b14bc5a52bb6b80eba0b60(global::System.Collections.Generic.IList<Samples.WriteThrough.Point> value)
            {
                checked
                {
                    return 10 + (12 * value.Count);
                }
            }

            private static global::System.Collections.Generic.IList<Samples.WriteThrough.Point> Read_e2c85fec21b14bc5a52bb6b80eba0b60<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return new FlatBufferProgressiveVector<global::Samples.WriteThrough.Point, TInputBuffer>(new FlatBufferVector_c8f10f54809e487ea051c5689bad147e<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    12,
                    fieldContext));
                }
            }

            public sealed class FlatBufferVector_c8f10f54809e487ea051c5689bad147e<TInputBuffer> : FlatBufferVector<global::Samples.WriteThrough.Point, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_c8f10f54809e487ea051c5689bad147e(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.WriteThrough.Point item)
                {
                    checked
                    {
                        item = Read_ef80711f8f9d4ca591a709a26cd4025f(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.WriteThrough.Point item, Span<byte> data)
                {
                    checked
                    {
                        WriteInlineValueOf_ef80711f8f9d4ca591a709a26cd4025f(default(SpanWriter), data, item, 0);
                    }
                }
            }



            private static void WriteInlineValueOf_e2c85fec21b14bc5a52bb6b80eba0b60<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.WriteThrough.Point> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 12);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.WriteThrough.Point[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];


                            WriteInlineValueOf_ef80711f8f9d4ca591a709a26cd4025f(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                    else if (value is List<Samples.WriteThrough.Point> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];


                            WriteInlineValueOf_ef80711f8f9d4ca591a709a26cd4025f(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];


                            WriteInlineValueOf_ef80711f8f9d4ca591a709a26cd4025f(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_ef80711f8f9d4ca591a709a26cd4025f(global::Samples.WriteThrough.Point value)
            {
                checked
                {
                    return 15;
                }
            }

            private static global::Samples.WriteThrough.Point Read_ef80711f8f9d4ca591a709a26cd4025f<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    var item = default(global::Samples.WriteThrough.Point);

                    item.X = Read_f22b8f2dae4f43efa621cc601eb20083<TInputBuffer>(
                        buffer,
                        offset + 0);

                    item.Y = Read_f22b8f2dae4f43efa621cc601eb20083<TInputBuffer>(
                        buffer,
                        offset + 4);

                    item.Z = Read_f22b8f2dae4f43efa621cc601eb20083<TInputBuffer>(
                        buffer,
                        offset + 8);
                    return item;

                }
            }

            private static void WriteInlineValueOf_ef80711f8f9d4ca591a709a26cd4025f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.WriteThrough.Point value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    Span<byte> sizedSpan = span.Slice(offset, 12);
                    WriteInlineValueOf_f22b8f2dae4f43efa621cc601eb20083(spanWriter, sizedSpan, value.X, 0);
                    WriteInlineValueOf_f22b8f2dae4f43efa621cc601eb20083(spanWriter, sizedSpan, value.Y, 4);
                    WriteInlineValueOf_f22b8f2dae4f43efa621cc601eb20083(spanWriter, sizedSpan, value.Z, 8);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_f22b8f2dae4f43efa621cc601eb20083(global::System.Single value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Single Read_f22b8f2dae4f43efa621cc601eb20083<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadFloat(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_f22b8f2dae4f43efa621cc601eb20083<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Single value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteFloat(span, value, offset);
                }
            }

            private static int GetMaxSizeOf_a42e042b181247fdac0828dc10a2a1ba(global::Samples.WriteThrough.MutableInt value)
            {
                checked
                {
                    return 7;
                }
            }

            private static global::Samples.WriteThrough.MutableInt Read_a42e042b181247fdac0828dc10a2a1ba<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    var item = default(global::Samples.WriteThrough.MutableInt);

                    item.Value = Read_06447c57ab9c4a32bd20749e2400ff89<TInputBuffer>(
                        buffer,
                        offset + 0);
                    return item;

                }
            }

            private static void WriteInlineValueOf_a42e042b181247fdac0828dc10a2a1ba<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.WriteThrough.MutableInt value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    Span<byte> sizedSpan = span.Slice(offset, 4);
                    WriteInlineValueOf_06447c57ab9c4a32bd20749e2400ff89(spanWriter, sizedSpan, value.Value, 0);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_06447c57ab9c4a32bd20749e2400ff89(global::System.Int32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Int32 Read_06447c57ab9c4a32bd20749e2400ff89<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadInt(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_06447c57ab9c4a32bd20749e2400ff89<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Int32 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteInt(span, value, offset);
                }
            }
        }

        #endregion
    }

}

namespace Samples.WriteThrough
{
    [FlatBufferStruct()]
    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit, Size = 12)]
    public partial struct Point
    {
        [System.Runtime.InteropServices.FieldOffset(0)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "X")]
        public float X;

        [System.Runtime.InteropServices.FieldOffset(4)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Y")]
        public float Y;

        [System.Runtime.InteropServices.FieldOffset(8)]
        [FlatBufferMetadataAttribute(FlatBufferMetadataKind.Accessor, "Z")]
        public float Z;

    }

}

