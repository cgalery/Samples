
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 6.2.1.nVQUOrOznraHQ/9gt5aXTSDc+CZXvI4X+5BWP68b/qU=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474
    {
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SchemaFilesExample2.CatBreed Clone(global::Samples.SchemaFilesExample2.CatBreed item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Int32 Clone(global::System.Int32 item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SchemaFilesExample2.Cat? Clone(global::Samples.SchemaFilesExample2.Cat? item)
        {
            checked
            {
                return item is null ? null : new Samples.SchemaFilesExample2.Cat(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.String? Clone(global::System.String? item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.UInt32 Clone(global::System.UInt32 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean Clone(global::System.Boolean item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Int64 Clone(global::System.Int64 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Double Clone(global::System.Double item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SchemaFilesExample2.Cat[]? Clone(global::Samples.SchemaFilesExample2.Cat[]? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.SchemaFilesExample2.Cat>(item, FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SchemaFilesExample2.CatsAndOwnersContainer? Clone(global::Samples.SchemaFilesExample2.CatsAndOwnersContainer? item)
        {
            checked
            {
                return item is null ? null : new Samples.SchemaFilesExample2.CatsAndOwnersContainer(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner>? Clone(global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.SchemaFilesExample2.Owner>(item, FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::Samples.SchemaFilesExample2.Owner? Clone(global::Samples.SchemaFilesExample2.Owner? item)
        {
            checked
            {
                return item is null ? null : new Samples.SchemaFilesExample2.Owner(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? Clone(global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<Samples.SchemaFilesExample2.Cat>(item, FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone);
            }
        }
    }

}

namespace Samples.SchemaFilesExample2
{
    [FlatBufferEnum(typeof(int))]
    public enum CatBreed : int
    {
        Ragdoll = 0,
        EuropeanShorthair = 1,
        NorwegianForestCat = 2,
        BritishShorthair = 3,
    }

}

namespace Samples.SchemaFilesExample2
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Cat
        : object
        , IFlatBufferSerializable<Samples.SchemaFilesExample2.Cat>
    {
#pragma warning disable CS8618
        public Cat()
        {
            checked
            {
                this.UniqueIdentfier = default!;
                this.AgeInYears = default!;
                this.IsFluffy = default!;
                this.Name = default!;
                this.Breed = default!;
                this.Whatever = default!;
                this.GramsOfFoodPerDay = default!;
                this.Children = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Cat(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Cat(Cat source)
        {
            checked
            {
                this.UniqueIdentfier = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.UniqueIdentfier);
                this.AgeInYears = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.AgeInYears);
                this.IsFluffy = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.IsFluffy);
                this.Name = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.Name);
                this.Breed = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.Breed);
                this.Whatever = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.Whatever);
                this.GramsOfFoodPerDay = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.GramsOfFoodPerDay);
                this.Children = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.Children);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual string? UniqueIdentfier { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual uint AgeInYears { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual bool IsFluffy { get; set; }

        [FlatBufferItemAttribute(3)]
        public virtual string? Name { get; set; }

        [FlatBufferItemAttribute(4)]
        public virtual Samples.SchemaFilesExample2.CatBreed Breed { get; set; }

        [FlatBufferItemAttribute(5)]
        public virtual long Whatever { get; set; }

        [FlatBufferItemAttribute(6)]
        public virtual double GramsOfFoodPerDay { get; set; }

        [FlatBufferItemAttribute(7)]
        public virtual Samples.SchemaFilesExample2.Cat[]? Children { get; set; }
        public static ISerializer<Samples.SchemaFilesExample2.Cat> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.SchemaFilesExample2.Cat> IFlatBufferSerializable<Samples.SchemaFilesExample2.Cat>.Serializer => Serializer;

        #region Serializer for Samples.SchemaFilesExample2.Cat

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.SchemaFilesExample2.Cat>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.1";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.GreedyMutable;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.SchemaFilesExample2.Cat root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_2001fe7ded89448ebbf3e364d0ddb66b(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.SchemaFilesExample2.Cat root)
            {
                checked
                {
                    return GetMaxSizeOf_2001fe7ded89448ebbf3e364d0ddb66b(root);
                }
            }

            public global::Samples.SchemaFilesExample2.Cat Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_2001fe7ded89448ebbf3e364d0ddb66b(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_2001fe7ded89448ebbf3e364d0ddb66b(global::Samples.SchemaFilesExample2.Cat value)
            {
                checked
                {

                    int runningSum = 73 + 21;
                    var index0Value = value.UniqueIdentfier;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_36b3df9d89624d4b90f5a7c0f4dc38b5(index0Value);
                    }
                    var index3Value = value.Name;

                    if (!(index3Value is null))
                    {
                        runningSum += GetMaxSizeOf_36b3df9d89624d4b90f5a7c0f4dc38b5(index3Value);
                    }
                    var index7Value = value.Children;

                    if (!(index7Value is null))
                    {
                        runningSum += GetMaxSizeOf_38a12920fdb54745b07704cca746002f(index7Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SchemaFilesExample2.Cat Read_2001fe7ded89448ebbf3e364d0ddb66b<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>
                : global::Samples.SchemaFilesExample2.Cat
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.UInt32 __index1Value;
                private System.Boolean __index2Value;
                private System.String? __index3Value;
                private Samples.SchemaFilesExample2.CatBreed __index4Value;
                private System.Int64 __index5Value;
                private System.Double __index6Value;
                private Samples.SchemaFilesExample2.Cat[]? __index7Value;

                public static tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_b251ae8367264ce18f5ddb9942239a24(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable8.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable);
                        this.__index2Value = ReadIndex2Value(buffer, offset, vtable);
                        this.__index3Value = ReadIndex3Value(buffer, offset, vtable);
                        this.__index4Value = ReadIndex4Value(buffer, offset, vtable);
                        this.__index5Value = ReadIndex5Value(buffer, offset, vtable);
                        this.__index6Value = ReadIndex6Value(buffer, offset, vtable);
                        this.__index7Value = ReadIndex7Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SchemaFilesExample2.Cat);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? UniqueIdentfier
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.UInt32 AgeInYears
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.Boolean IsFluffy
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                public override System.String? Name
                {
                    get
                    {
                        checked
                        {
                            return this.__index3Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index3Value = value;
                        }
                    }
                }

                public override Samples.SchemaFilesExample2.CatBreed Breed
                {
                    get
                    {
                        checked
                        {
                            return this.__index4Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index4Value = value;
                        }
                    }
                }

                public override System.Int64 Whatever
                {
                    get
                    {
                        checked
                        {
                            return this.__index5Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index5Value = value;
                        }
                    }
                }

                public override System.Double GramsOfFoodPerDay
                {
                    get
                    {
                        checked
                        {
                            return this.__index6Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index6Value = value;
                        }
                    }
                }

                public override Samples.SchemaFilesExample2.Cat[]? Children
                {
                    get
                    {
                        checked
                        {
                            return this.__index7Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index7Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_36b3df9d89624d4b90f5a7c0f4dc38b5(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return default(System.UInt32);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_54ec3542f7be47a6b1ccf44e8051e3ea(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Boolean ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 2);
                            if (relativeOffset == 0)
                            {
                                return default(System.Boolean);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_d0d8c74588c04ce691de134d8c152563(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex3Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 3);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_36b3df9d89624d4b90f5a7c0f4dc38b5(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.SchemaFilesExample2.CatBreed ReadIndex4Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 4);
                            if (relativeOffset == 0)
                            {
                                return default(Samples.SchemaFilesExample2.CatBreed);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_4bb873e36f464890b9168e7e60ab7d21(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Int64 ReadIndex5Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 5);
                            if (relativeOffset == 0)
                            {
                                return default(System.Int64);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_9ebf5b1b97b24b4db90b61776a43de8c(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Double ReadIndex6Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 6);
                            if (relativeOffset == 0)
                            {
                                return default(System.Double);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_53ed6ee27c5c4d6895d5de623dee8b3e(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.SchemaFilesExample2.Cat[]? ReadIndex7Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 7);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_38a12920fdb54745b07704cca746002f(buffer, absoluteLocation, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.Children);
                    }
                }
            }



            private static void WriteInlineValueOf_2001fe7ded89448ebbf3e364d0ddb66b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Cat value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(70, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[20];

                    var index0Value = value.UniqueIdentfier;
                    var index1Value = value.AgeInYears;
                    var index2Value = value.IsFluffy;
                    var index3Value = value.Name;
                    var index4Value = value.Breed;
                    var index5Value = value.Whatever;
                    var index6Value = value.GramsOfFoodPerDay;
                    var index7Value = value.Children;

                    var index6Offset = tableStart;
                    if (index6Value != default(System.Double))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index6Offset = currentOffset;
                        currentOffset += 8;


                        WriteInlineValueOf_53ed6ee27c5c4d6895d5de623dee8b3e(spanWriter, span, index6Value, index6Offset);


                        if (18 > vtableLength)
                        {
                            vtableLength = 18;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index6Offset - tableStart), 16);

                    var index5Offset = tableStart;
                    if (index5Value != default(System.Int64))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index5Offset = currentOffset;
                        currentOffset += 8;


                        WriteInlineValueOf_9ebf5b1b97b24b4db90b61776a43de8c(spanWriter, span, index5Value, index5Offset);


                        if (16 > vtableLength)
                        {
                            vtableLength = 16;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index5Offset - tableStart), 14);

                    var index7Offset = tableStart;
                    if (!(index7Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 20;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index7Offset - tableStart), 18);

                    var index4Offset = tableStart;
                    if (index4Value != default(Samples.SchemaFilesExample2.CatBreed))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        currentOffset += 4;


                        WriteInlineValueOf_4bb873e36f464890b9168e7e60ab7d21(spanWriter, span, index4Value, index4Offset);


                        if (14 > vtableLength)
                        {
                            vtableLength = 14;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index4Offset - tableStart), 12);

                    var index3Offset = tableStart;
                    if (!(index3Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        currentOffset += 4;


                        if (12 > vtableLength)
                        {
                            vtableLength = 12;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                    var index1Offset = tableStart;
                    if (index1Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;


                        WriteInlineValueOf_54ec3542f7be47a6b1ccf44e8051e3ea(spanWriter, span, index1Value, index1Offset);


                        if (8 > vtableLength)
                        {
                            vtableLength = 8;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index2Offset = tableStart;
                    if (index2Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        currentOffset += 1;


                        WriteInlineValueOf_d0d8c74588c04ce691de134d8c152563(spanWriter, span, index2Value, index2Offset);


                        if (10 > vtableLength)
                        {
                            vtableLength = 10;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 70 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index7Offset != tableStart)
                    {


                        WriteInlineValueOf_38a12920fdb54745b07704cca746002f(spanWriter, span, index7Value!, index7Offset, context);

                    }


                    if (index3Offset != tableStart)
                    {


                        WriteInlineValueOf_36b3df9d89624d4b90f5a7c0f4dc38b5(spanWriter, span, index3Value!, index3Offset, context, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.Name);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_36b3df9d89624d4b90f5a7c0f4dc38b5(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.UniqueIdentfier);

                    }

                }
            }

            private static class tableMetadata_23706d3bcf804a21856b6d65cfe2f809
            {

                public static readonly TableFieldContext UniqueIdentfier = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.UniqueIdentfier",
                    false,
                    false);

                public static readonly TableFieldContext AgeInYears = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.AgeInYears",
                    false,
                    false);

                public static readonly TableFieldContext IsFluffy = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.IsFluffy",
                    false,
                    false);

                public static readonly TableFieldContext Name = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Name",
                    false,
                    false);

                public static readonly TableFieldContext Breed = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Breed",
                    false,
                    false);

                public static readonly TableFieldContext Whatever = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Whatever",
                    false,
                    false);

                public static readonly TableFieldContext GramsOfFoodPerDay = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.GramsOfFoodPerDay",
                    false,
                    false);

                public static readonly TableFieldContext Children = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Children",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_36b3df9d89624d4b90f5a7c0f4dc38b5(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_36b3df9d89624d4b90f5a7c0f4dc38b5<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_36b3df9d89624d4b90f5a7c0f4dc38b5<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_54ec3542f7be47a6b1ccf44e8051e3ea(global::System.UInt32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.UInt32 Read_54ec3542f7be47a6b1ccf44e8051e3ea<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadUInt(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_54ec3542f7be47a6b1ccf44e8051e3ea<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.UInt32 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteUInt(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_d0d8c74588c04ce691de134d8c152563(global::System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Boolean Read_d0d8c74588c04ce691de134d8c152563<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_d0d8c74588c04ce691de134d8c152563<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Boolean value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_4bb873e36f464890b9168e7e60ab7d21(global::Samples.SchemaFilesExample2.CatBreed value)
            {
                checked
                {
                    return GetMaxSizeOf_1609fc832da343bc96e14ff0fec6f67d((global::System.Int32)value);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::Samples.SchemaFilesExample2.CatBreed Read_4bb873e36f464890b9168e7e60ab7d21<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (Samples.SchemaFilesExample2.CatBreed)Read_1609fc832da343bc96e14ff0fec6f67d(buffer, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_4bb873e36f464890b9168e7e60ab7d21<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.CatBreed value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_1609fc832da343bc96e14ff0fec6f67d(spanWriter, span, (global::System.Int32)value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_1609fc832da343bc96e14ff0fec6f67d(global::System.Int32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Int32 Read_1609fc832da343bc96e14ff0fec6f67d<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadInt(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_1609fc832da343bc96e14ff0fec6f67d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Int32 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteInt(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_9ebf5b1b97b24b4db90b61776a43de8c(global::System.Int64 value)
            {
                checked
                {
                    return 15;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Int64 Read_9ebf5b1b97b24b4db90b61776a43de8c<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadLong(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_9ebf5b1b97b24b4db90b61776a43de8c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Int64 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteLong(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_53ed6ee27c5c4d6895d5de623dee8b3e(global::System.Double value)
            {
                checked
                {
                    return 15;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Double Read_53ed6ee27c5c4d6895d5de623dee8b3e<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadDouble(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_53ed6ee27c5c4d6895d5de623dee8b3e<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Double value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteDouble(span, value, offset);
                }
            }

            private static int GetMaxSizeOf_38a12920fdb54745b07704cca746002f(global::Samples.SchemaFilesExample2.Cat[] value)
            {
                checked
                {

                    int count = value.Length;
                    int runningSum = 14;

                    for (int i = 0; i < value.Length; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += GetMaxSizeOf_2001fe7ded89448ebbf3e364d0ddb66b(current);
                    }

                    return runningSum;
                }
            }

            private static global::Samples.SchemaFilesExample2.Cat[] Read_38a12920fdb54745b07704cca746002f<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_0448779fd94c4e659b283a13abd5fd67<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4,
                        fieldContext)).ToArray();
                }
            }

            public sealed class FlatBufferVector_0448779fd94c4e659b283a13abd5fd67<TInputBuffer> : FlatBufferVector<global::Samples.SchemaFilesExample2.Cat, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_0448779fd94c4e659b283a13abd5fd67(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SchemaFilesExample2.Cat item)
                {
                    checked
                    {
                        item = Read_2001fe7ded89448ebbf3e364d0ddb66b(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SchemaFilesExample2.Cat item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_38a12920fdb54745b07704cca746002f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Cat[] value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Length;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    for (int i = 0; i < value.Length; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_2001fe7ded89448ebbf3e364d0ddb66b(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        #endregion
    }

}

namespace Samples.SchemaFilesExample2
{
    /// <summary>
    ///  This comment is injected into C# because of the '///'
    /// </summary>
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class CatsAndOwnersContainer
        : object
        , IFlatBufferSerializable<Samples.SchemaFilesExample2.CatsAndOwnersContainer>
    {
#pragma warning disable CS8618
        public CatsAndOwnersContainer()
        {
            checked
            {
                this.cats = default!;
                this.owners = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected CatsAndOwnersContainer(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public CatsAndOwnersContainer(CatsAndOwnersContainer source)
        {
            checked
            {
                this.cats = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.cats);
                this.owners = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.owners);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual Samples.SchemaFilesExample2.Cat[]? cats { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual IList<Samples.SchemaFilesExample2.Owner>? owners { get; set; }
        public static ISerializer<Samples.SchemaFilesExample2.CatsAndOwnersContainer> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.SchemaFilesExample2.CatsAndOwnersContainer> IFlatBufferSerializable<Samples.SchemaFilesExample2.CatsAndOwnersContainer>.Serializer => Serializer;

        #region Serializer for Samples.SchemaFilesExample2.CatsAndOwnersContainer

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.SchemaFilesExample2.CatsAndOwnersContainer>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.1";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.GreedyMutable;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.SchemaFilesExample2.CatsAndOwnersContainer root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_9d397d31f1e942639d608bf885020a88(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.SchemaFilesExample2.CatsAndOwnersContainer root)
            {
                checked
                {
                    return GetMaxSizeOf_9d397d31f1e942639d608bf885020a88(root);
                }
            }

            public global::Samples.SchemaFilesExample2.CatsAndOwnersContainer Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_9d397d31f1e942639d608bf885020a88(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_9d397d31f1e942639d608bf885020a88(global::Samples.SchemaFilesExample2.CatsAndOwnersContainer value)
            {
                checked
                {

                    int runningSum = 21 + 9;
                    var index0Value = value.cats;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_6fc771a48c2b4fecac447537aa4b05f9(index0Value);
                    }
                    var index1Value = value.owners;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_b230d7deac0b45438105a84a46e0367d(index1Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SchemaFilesExample2.CatsAndOwnersContainer Read_9d397d31f1e942639d608bf885020a88<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_a1c8851ce9bc43acb312ab29241d2f2b<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_a1c8851ce9bc43acb312ab29241d2f2b<TInputBuffer>
                : global::Samples.SchemaFilesExample2.CatsAndOwnersContainer
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private Samples.SchemaFilesExample2.Cat[]? __index0Value;
                private System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner>? __index1Value;

                public static tableReader_a1c8851ce9bc43acb312ab29241d2f2b<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_a1c8851ce9bc43acb312ab29241d2f2b<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_a1c8851ce9bc43acb312ab29241d2f2b(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SchemaFilesExample2.CatsAndOwnersContainer);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override Samples.SchemaFilesExample2.Cat[]? cats
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner>? owners
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.SchemaFilesExample2.Cat[]? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_6fc771a48c2b4fecac447537aa4b05f9(buffer, absoluteLocation, tableMetadata_6b47a5c3eaaf48edb247b86aa09dd1ac.cats);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner>? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_b230d7deac0b45438105a84a46e0367d(buffer, absoluteLocation, tableMetadata_6b47a5c3eaaf48edb247b86aa09dd1ac.owners);
                    }
                }
            }



            private static void WriteInlineValueOf_9d397d31f1e942639d608bf885020a88<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.CatsAndOwnersContainer value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(18, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.cats;
                    var index1Value = value.owners;

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 18 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_b230d7deac0b45438105a84a46e0367d(spanWriter, span, index1Value!, index1Offset, context);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_6fc771a48c2b4fecac447537aa4b05f9(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static class tableMetadata_6b47a5c3eaaf48edb247b86aa09dd1ac
            {

                public static readonly TableFieldContext cats = new TableFieldContext(
                    "Samples.SchemaFilesExample2.CatsAndOwnersContainer.cats",
                    false,
                    false);

                public static readonly TableFieldContext owners = new TableFieldContext(
                    "Samples.SchemaFilesExample2.CatsAndOwnersContainer.owners",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_6fc771a48c2b4fecac447537aa4b05f9(global::Samples.SchemaFilesExample2.Cat[] value)
            {
                checked
                {

                    int count = value.Length;
                    int runningSum = 14;

                    for (int i = 0; i < value.Length; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += GetMaxSizeOf_cd67e377c6d042fdaabcf8c879086aae(current);
                    }

                    return runningSum;
                }
            }

            private static global::Samples.SchemaFilesExample2.Cat[] Read_6fc771a48c2b4fecac447537aa4b05f9<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_0b2b0a741d0742ba9e85457c70a495b8<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4,
                        fieldContext)).ToArray();
                }
            }

            public sealed class FlatBufferVector_0b2b0a741d0742ba9e85457c70a495b8<TInputBuffer> : FlatBufferVector<global::Samples.SchemaFilesExample2.Cat, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_0b2b0a741d0742ba9e85457c70a495b8(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SchemaFilesExample2.Cat item)
                {
                    checked
                    {
                        item = Read_cd67e377c6d042fdaabcf8c879086aae(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SchemaFilesExample2.Cat item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_6fc771a48c2b4fecac447537aa4b05f9<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Cat[] value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Length;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    for (int i = 0; i < value.Length; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_cd67e377c6d042fdaabcf8c879086aae(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }

            private static int GetMaxSizeOf_cd67e377c6d042fdaabcf8c879086aae(global::Samples.SchemaFilesExample2.Cat value)
            {
                checked
                {

                    int runningSum = 73 + 21;
                    var index0Value = value.UniqueIdentfier;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_d7d3ca658e9643d4989d45cc7da2f74d(index0Value);
                    }
                    var index3Value = value.Name;

                    if (!(index3Value is null))
                    {
                        runningSum += GetMaxSizeOf_d7d3ca658e9643d4989d45cc7da2f74d(index3Value);
                    }
                    var index7Value = value.Children;

                    if (!(index7Value is null))
                    {
                        runningSum += GetMaxSizeOf_6fc771a48c2b4fecac447537aa4b05f9(index7Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SchemaFilesExample2.Cat Read_cd67e377c6d042fdaabcf8c879086aae<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>
                : global::Samples.SchemaFilesExample2.Cat
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.UInt32 __index1Value;
                private System.Boolean __index2Value;
                private System.String? __index3Value;
                private Samples.SchemaFilesExample2.CatBreed __index4Value;
                private System.Int64 __index5Value;
                private System.Double __index6Value;
                private Samples.SchemaFilesExample2.Cat[]? __index7Value;

                public static tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_b251ae8367264ce18f5ddb9942239a24(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable8.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable);
                        this.__index2Value = ReadIndex2Value(buffer, offset, vtable);
                        this.__index3Value = ReadIndex3Value(buffer, offset, vtable);
                        this.__index4Value = ReadIndex4Value(buffer, offset, vtable);
                        this.__index5Value = ReadIndex5Value(buffer, offset, vtable);
                        this.__index6Value = ReadIndex6Value(buffer, offset, vtable);
                        this.__index7Value = ReadIndex7Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SchemaFilesExample2.Cat);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? UniqueIdentfier
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.UInt32 AgeInYears
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.Boolean IsFluffy
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                public override System.String? Name
                {
                    get
                    {
                        checked
                        {
                            return this.__index3Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index3Value = value;
                        }
                    }
                }

                public override Samples.SchemaFilesExample2.CatBreed Breed
                {
                    get
                    {
                        checked
                        {
                            return this.__index4Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index4Value = value;
                        }
                    }
                }

                public override System.Int64 Whatever
                {
                    get
                    {
                        checked
                        {
                            return this.__index5Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index5Value = value;
                        }
                    }
                }

                public override System.Double GramsOfFoodPerDay
                {
                    get
                    {
                        checked
                        {
                            return this.__index6Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index6Value = value;
                        }
                    }
                }

                public override Samples.SchemaFilesExample2.Cat[]? Children
                {
                    get
                    {
                        checked
                        {
                            return this.__index7Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index7Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_d7d3ca658e9643d4989d45cc7da2f74d(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return default(System.UInt32);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_15fbe343742048dbab45e634a61c9524(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Boolean ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 2);
                            if (relativeOffset == 0)
                            {
                                return default(System.Boolean);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_439bec91d14d408ba9039f7da32e0a40(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex3Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 3);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_d7d3ca658e9643d4989d45cc7da2f74d(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.SchemaFilesExample2.CatBreed ReadIndex4Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 4);
                            if (relativeOffset == 0)
                            {
                                return default(Samples.SchemaFilesExample2.CatBreed);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_613029cbf6eb4ddb84742076a2ac7c6e(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Int64 ReadIndex5Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 5);
                            if (relativeOffset == 0)
                            {
                                return default(System.Int64);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_ef0f195f72a64d5fb0e4ab4057be9f43(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Double ReadIndex6Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 6);
                            if (relativeOffset == 0)
                            {
                                return default(System.Double);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_64db4446368549b992e03e56085a9a0f(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.SchemaFilesExample2.Cat[]? ReadIndex7Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 7);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_6fc771a48c2b4fecac447537aa4b05f9(buffer, absoluteLocation, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.Children);
                    }
                }
            }



            private static void WriteInlineValueOf_cd67e377c6d042fdaabcf8c879086aae<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Cat value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(70, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[20];

                    var index0Value = value.UniqueIdentfier;
                    var index1Value = value.AgeInYears;
                    var index2Value = value.IsFluffy;
                    var index3Value = value.Name;
                    var index4Value = value.Breed;
                    var index5Value = value.Whatever;
                    var index6Value = value.GramsOfFoodPerDay;
                    var index7Value = value.Children;

                    var index6Offset = tableStart;
                    if (index6Value != default(System.Double))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index6Offset = currentOffset;
                        currentOffset += 8;


                        WriteInlineValueOf_64db4446368549b992e03e56085a9a0f(spanWriter, span, index6Value, index6Offset);


                        if (18 > vtableLength)
                        {
                            vtableLength = 18;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index6Offset - tableStart), 16);

                    var index5Offset = tableStart;
                    if (index5Value != default(System.Int64))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index5Offset = currentOffset;
                        currentOffset += 8;


                        WriteInlineValueOf_ef0f195f72a64d5fb0e4ab4057be9f43(spanWriter, span, index5Value, index5Offset);


                        if (16 > vtableLength)
                        {
                            vtableLength = 16;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index5Offset - tableStart), 14);

                    var index7Offset = tableStart;
                    if (!(index7Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 20;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index7Offset - tableStart), 18);

                    var index4Offset = tableStart;
                    if (index4Value != default(Samples.SchemaFilesExample2.CatBreed))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        currentOffset += 4;


                        WriteInlineValueOf_613029cbf6eb4ddb84742076a2ac7c6e(spanWriter, span, index4Value, index4Offset);


                        if (14 > vtableLength)
                        {
                            vtableLength = 14;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index4Offset - tableStart), 12);

                    var index3Offset = tableStart;
                    if (!(index3Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        currentOffset += 4;


                        if (12 > vtableLength)
                        {
                            vtableLength = 12;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                    var index1Offset = tableStart;
                    if (index1Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;


                        WriteInlineValueOf_15fbe343742048dbab45e634a61c9524(spanWriter, span, index1Value, index1Offset);


                        if (8 > vtableLength)
                        {
                            vtableLength = 8;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index2Offset = tableStart;
                    if (index2Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        currentOffset += 1;


                        WriteInlineValueOf_439bec91d14d408ba9039f7da32e0a40(spanWriter, span, index2Value, index2Offset);


                        if (10 > vtableLength)
                        {
                            vtableLength = 10;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 70 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index7Offset != tableStart)
                    {


                        WriteInlineValueOf_6fc771a48c2b4fecac447537aa4b05f9(spanWriter, span, index7Value!, index7Offset, context);

                    }


                    if (index3Offset != tableStart)
                    {


                        WriteInlineValueOf_d7d3ca658e9643d4989d45cc7da2f74d(spanWriter, span, index3Value!, index3Offset, context, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.Name);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_d7d3ca658e9643d4989d45cc7da2f74d(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.UniqueIdentfier);

                    }

                }
            }

            private static class tableMetadata_23706d3bcf804a21856b6d65cfe2f809
            {

                public static readonly TableFieldContext UniqueIdentfier = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.UniqueIdentfier",
                    false,
                    false);

                public static readonly TableFieldContext AgeInYears = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.AgeInYears",
                    false,
                    false);

                public static readonly TableFieldContext IsFluffy = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.IsFluffy",
                    false,
                    false);

                public static readonly TableFieldContext Name = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Name",
                    false,
                    false);

                public static readonly TableFieldContext Breed = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Breed",
                    false,
                    false);

                public static readonly TableFieldContext Whatever = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Whatever",
                    false,
                    false);

                public static readonly TableFieldContext GramsOfFoodPerDay = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.GramsOfFoodPerDay",
                    false,
                    false);

                public static readonly TableFieldContext Children = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Children",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_d7d3ca658e9643d4989d45cc7da2f74d(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_d7d3ca658e9643d4989d45cc7da2f74d<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_d7d3ca658e9643d4989d45cc7da2f74d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_15fbe343742048dbab45e634a61c9524(global::System.UInt32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.UInt32 Read_15fbe343742048dbab45e634a61c9524<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadUInt(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_15fbe343742048dbab45e634a61c9524<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.UInt32 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteUInt(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_439bec91d14d408ba9039f7da32e0a40(global::System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Boolean Read_439bec91d14d408ba9039f7da32e0a40<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_439bec91d14d408ba9039f7da32e0a40<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Boolean value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_613029cbf6eb4ddb84742076a2ac7c6e(global::Samples.SchemaFilesExample2.CatBreed value)
            {
                checked
                {
                    return GetMaxSizeOf_151c9f9f034d4b139e4cbe205b0bca45((global::System.Int32)value);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::Samples.SchemaFilesExample2.CatBreed Read_613029cbf6eb4ddb84742076a2ac7c6e<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (Samples.SchemaFilesExample2.CatBreed)Read_151c9f9f034d4b139e4cbe205b0bca45(buffer, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_613029cbf6eb4ddb84742076a2ac7c6e<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.CatBreed value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_151c9f9f034d4b139e4cbe205b0bca45(spanWriter, span, (global::System.Int32)value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_151c9f9f034d4b139e4cbe205b0bca45(global::System.Int32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Int32 Read_151c9f9f034d4b139e4cbe205b0bca45<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadInt(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_151c9f9f034d4b139e4cbe205b0bca45<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Int32 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteInt(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_ef0f195f72a64d5fb0e4ab4057be9f43(global::System.Int64 value)
            {
                checked
                {
                    return 15;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Int64 Read_ef0f195f72a64d5fb0e4ab4057be9f43<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadLong(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_ef0f195f72a64d5fb0e4ab4057be9f43<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Int64 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteLong(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_64db4446368549b992e03e56085a9a0f(global::System.Double value)
            {
                checked
                {
                    return 15;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Double Read_64db4446368549b992e03e56085a9a0f<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadDouble(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_64db4446368549b992e03e56085a9a0f<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Double value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteDouble(span, value, offset);
                }
            }

            private static int GetMaxSizeOf_b230d7deac0b45438105a84a46e0367d(global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Samples.SchemaFilesExample2.Owner[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_d2b5d08126fd460a8767a3e4f4606e65(current);
                        }
                    }
                    else if (value is List<Samples.SchemaFilesExample2.Owner> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_d2b5d08126fd460a8767a3e4f4606e65(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_d2b5d08126fd460a8767a3e4f4606e65(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner> Read_b230d7deac0b45438105a84a46e0367d<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_3742257eadfc406f84f250a48e1310b2<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_3742257eadfc406f84f250a48e1310b2<TInputBuffer> : FlatBufferVector<global::Samples.SchemaFilesExample2.Owner, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_3742257eadfc406f84f250a48e1310b2(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SchemaFilesExample2.Owner item)
                {
                    checked
                    {
                        item = Read_d2b5d08126fd460a8767a3e4f4606e65(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SchemaFilesExample2.Owner item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_b230d7deac0b45438105a84a46e0367d<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Owner> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.SchemaFilesExample2.Owner[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_d2b5d08126fd460a8767a3e4f4606e65(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Samples.SchemaFilesExample2.Owner> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_d2b5d08126fd460a8767a3e4f4606e65(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_d2b5d08126fd460a8767a3e4f4606e65(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_d2b5d08126fd460a8767a3e4f4606e65(global::Samples.SchemaFilesExample2.Owner value)
            {
                checked
                {

                    int runningSum = 21 + 9;
                    var index0Value = value.Name;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_d7d3ca658e9643d4989d45cc7da2f74d(index0Value);
                    }
                    var index1Value = value.Cats;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_8796817ba2204147a1a0cb6d03984019(index1Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SchemaFilesExample2.Owner Read_d2b5d08126fd460a8767a3e4f4606e65<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer>
                : global::Samples.SchemaFilesExample2.Owner
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? __index1Value;

                public static tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_2bfad668f0f643cbbe9127d378053e01(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SchemaFilesExample2.Owner);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? Name
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? Cats
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_d7d3ca658e9643d4989d45cc7da2f74d(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_8796817ba2204147a1a0cb6d03984019(buffer, absoluteLocation, tableMetadata_549a05249fee4b77a1ac3cfb9875502d.Cats);
                    }
                }
            }



            private static void WriteInlineValueOf_d2b5d08126fd460a8767a3e4f4606e65<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Owner value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(18, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.Name;
                    var index1Value = value.Cats;

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 18 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_8796817ba2204147a1a0cb6d03984019(spanWriter, span, index1Value!, index1Offset, context);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_d7d3ca658e9643d4989d45cc7da2f74d(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_549a05249fee4b77a1ac3cfb9875502d.Name);

                    }

                }
            }

            private static class tableMetadata_549a05249fee4b77a1ac3cfb9875502d
            {

                public static readonly TableFieldContext Name = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Owner.Name",
                    false,
                    false);

                public static readonly TableFieldContext Cats = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Owner.Cats",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_8796817ba2204147a1a0cb6d03984019(global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Samples.SchemaFilesExample2.Cat[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_cd67e377c6d042fdaabcf8c879086aae(current);
                        }
                    }
                    else if (value is List<Samples.SchemaFilesExample2.Cat> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_cd67e377c6d042fdaabcf8c879086aae(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_cd67e377c6d042fdaabcf8c879086aae(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat> Read_8796817ba2204147a1a0cb6d03984019<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_72c981cf651f4ece94685ad42f677660<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_72c981cf651f4ece94685ad42f677660<TInputBuffer> : FlatBufferVector<global::Samples.SchemaFilesExample2.Cat, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_72c981cf651f4ece94685ad42f677660(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SchemaFilesExample2.Cat item)
                {
                    checked
                    {
                        item = Read_cd67e377c6d042fdaabcf8c879086aae(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SchemaFilesExample2.Cat item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_8796817ba2204147a1a0cb6d03984019<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.SchemaFilesExample2.Cat[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_cd67e377c6d042fdaabcf8c879086aae(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Samples.SchemaFilesExample2.Cat> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_cd67e377c6d042fdaabcf8c879086aae(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_cd67e377c6d042fdaabcf8c879086aae(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }
        }

        #endregion
    }

}

namespace Samples.SchemaFilesExample2
{
    [FlatBufferTable()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Owner
        : object
        , IFlatBufferSerializable<Samples.SchemaFilesExample2.Owner>
    {
#pragma warning disable CS8618
        public Owner()
        {
            checked
            {
                this.Name = default!;
                this.Cats = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected Owner(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Owner(Owner source)
        {
            checked
            {
                this.Name = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.Name);
                this.Cats = FlatSharp.Compiler.Generated.CloneHelpers_42f8a3ea6f1e44168aa262f9b7960474.Clone(source.Cats);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);


        [FlatBufferItemAttribute(0)]
        public virtual string? Name { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual IList<Samples.SchemaFilesExample2.Cat>? Cats { get; set; }
        public static ISerializer<Samples.SchemaFilesExample2.Owner> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<Samples.SchemaFilesExample2.Owner> IFlatBufferSerializable<Samples.SchemaFilesExample2.Owner>.Serializer => Serializer;

        #region Serializer for Samples.SchemaFilesExample2.Owner

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<global::Samples.SchemaFilesExample2.Owner>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);
                    this.Parse<ArraySegmentInputBuffer>(default!, 0);

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public GeneratedSerializer()
            {
                checked
                {
                    string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                    string compilerVersion = "6.2.1";

                    if (runtimeVersion != compilerVersion)
                    {
                        throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }

                    if (string.IsNullOrEmpty(runtimeVersion))
                    {
                        throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                    }
                }
            }

            public FlatSharp.FlatBufferDeserializationOption DeserializationOption => FlatSharp.FlatBufferDeserializationOption.GreedyMutable;


            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::Samples.SchemaFilesExample2.Owner root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_74e17be8249f4bbe812412a7900ade4a(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(global::Samples.SchemaFilesExample2.Owner root)
            {
                checked
                {
                    return GetMaxSizeOf_74e17be8249f4bbe812412a7900ade4a(root);
                }
            }

            public global::Samples.SchemaFilesExample2.Owner Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_74e17be8249f4bbe812412a7900ade4a(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_74e17be8249f4bbe812412a7900ade4a(global::Samples.SchemaFilesExample2.Owner value)
            {
                checked
                {

                    int runningSum = 21 + 9;
                    var index0Value = value.Name;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_341066e2332b496399aef319d967480c(index0Value);
                    }
                    var index1Value = value.Cats;

                    if (!(index1Value is null))
                    {
                        runningSum += GetMaxSizeOf_b141cdda3fe44e81b46741a84f37a987(index1Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SchemaFilesExample2.Owner Read_74e17be8249f4bbe812412a7900ade4a<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer>
                : global::Samples.SchemaFilesExample2.Owner
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? __index1Value;

                public static tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_2bfad668f0f643cbbe9127d378053e01<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_2bfad668f0f643cbbe9127d378053e01(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SchemaFilesExample2.Owner);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? Name
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? Cats
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_341066e2332b496399aef319d967480c(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat>? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable4 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_b141cdda3fe44e81b46741a84f37a987(buffer, absoluteLocation, tableMetadata_549a05249fee4b77a1ac3cfb9875502d.Cats);
                    }
                }
            }



            private static void WriteInlineValueOf_74e17be8249f4bbe812412a7900ade4a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Owner value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(18, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.Name;
                    var index1Value = value.Cats;

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 18 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index1Offset != tableStart)
                    {


                        WriteInlineValueOf_b141cdda3fe44e81b46741a84f37a987(spanWriter, span, index1Value!, index1Offset, context);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_341066e2332b496399aef319d967480c(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_549a05249fee4b77a1ac3cfb9875502d.Name);

                    }

                }
            }

            private static class tableMetadata_549a05249fee4b77a1ac3cfb9875502d
            {

                public static readonly TableFieldContext Name = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Owner.Name",
                    false,
                    false);

                public static readonly TableFieldContext Cats = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Owner.Cats",
                    false,
                    false);
            }



            private static int GetMaxSizeOf_341066e2332b496399aef319d967480c(global::System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static global::System.String Read_341066e2332b496399aef319d967480c<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_341066e2332b496399aef319d967480c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.String value,
                int offset
                , SerializationContext context
                , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    spanWriter.WriteString(
                        span,
                        value,
                        offset,
                        context);

                }
            }

            private static int GetMaxSizeOf_b141cdda3fe44e81b46741a84f37a987(global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat> value)
            {
                checked
                {

                    int count = value.Count;
                    int runningSum = 14;

                    if (value is Samples.SchemaFilesExample2.Cat[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_20290f751a1149edb97478331329a108(current);
                        }
                    }
                    else if (value is List<Samples.SchemaFilesExample2.Cat> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_20290f751a1149edb97478331329a108(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            runningSum += GetMaxSizeOf_20290f751a1149edb97478331329a108(current);
                        }
                    }

                    return runningSum;
                }
            }

            private static global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat> Read_b141cdda3fe44e81b46741a84f37a987<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_af2fbaed7edb4109b95c3da543bbfc85<TInputBuffer>(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    4,
                    fieldContext)).FlatBufferVectorToList();
                }
            }

            public sealed class FlatBufferVector_af2fbaed7edb4109b95c3da543bbfc85<TInputBuffer> : FlatBufferVector<global::Samples.SchemaFilesExample2.Cat, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_af2fbaed7edb4109b95c3da543bbfc85(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SchemaFilesExample2.Cat item)
                {
                    checked
                    {
                        item = Read_20290f751a1149edb97478331329a108(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SchemaFilesExample2.Cat item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_b141cdda3fe44e81b46741a84f37a987<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Collections.Generic.IList<Samples.SchemaFilesExample2.Cat> value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is Samples.SchemaFilesExample2.Cat[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_20290f751a1149edb97478331329a108(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else if (value is List<Samples.SchemaFilesExample2.Cat> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_20290f751a1149edb97478331329a108(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_20290f751a1149edb97478331329a108(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }
            }

            private static int GetMaxSizeOf_20290f751a1149edb97478331329a108(global::Samples.SchemaFilesExample2.Cat value)
            {
                checked
                {

                    int runningSum = 73 + 21;
                    var index0Value = value.UniqueIdentfier;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_341066e2332b496399aef319d967480c(index0Value);
                    }
                    var index3Value = value.Name;

                    if (!(index3Value is null))
                    {
                        runningSum += GetMaxSizeOf_341066e2332b496399aef319d967480c(index3Value);
                    }
                    var index7Value = value.Children;

                    if (!(index7Value is null))
                    {
                        runningSum += GetMaxSizeOf_1c9e7d01b11a446ea71c0a67af854a44(index7Value);
                    }
                    return runningSum;

                }
            }

            private static global::Samples.SchemaFilesExample2.Cat Read_20290f751a1149edb97478331329a108<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>
                : global::Samples.SchemaFilesExample2.Cat
                , global::FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.UInt32 __index1Value;
                private System.Boolean __index2Value;
                private System.String? __index3Value;
                private Samples.SchemaFilesExample2.CatBreed __index4Value;
                private System.Int64 __index5Value;
                private System.Double __index6Value;
                private Samples.SchemaFilesExample2.Cat[]? __index7Value;

                public static tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_b251ae8367264ce18f5ddb9942239a24<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_b251ae8367264ce18f5ddb9942239a24(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        VTable8.Create<TInputBuffer>(buffer, offset, out var vtable);
                        this.__index0Value = ReadIndex0Value(buffer, offset, vtable);
                        this.__index1Value = ReadIndex1Value(buffer, offset, vtable);
                        this.__index2Value = ReadIndex2Value(buffer, offset, vtable);
                        this.__index3Value = ReadIndex3Value(buffer, offset, vtable);
                        this.__index4Value = ReadIndex4Value(buffer, offset, vtable);
                        this.__index5Value = ReadIndex5Value(buffer, offset, vtable);
                        this.__index6Value = ReadIndex6Value(buffer, offset, vtable);
                        this.__index7Value = ReadIndex7Value(buffer, offset, vtable);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(Samples.SchemaFilesExample2.Cat);
                global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;
                bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;


                public override System.String? UniqueIdentfier
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.UInt32 AgeInYears
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.Boolean IsFluffy
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                public override System.String? Name
                {
                    get
                    {
                        checked
                        {
                            return this.__index3Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index3Value = value;
                        }
                    }
                }

                public override Samples.SchemaFilesExample2.CatBreed Breed
                {
                    get
                    {
                        checked
                        {
                            return this.__index4Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index4Value = value;
                        }
                    }
                }

                public override System.Int64 Whatever
                {
                    get
                    {
                        checked
                        {
                            return this.__index5Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index5Value = value;
                        }
                    }
                }

                public override System.Double GramsOfFoodPerDay
                {
                    get
                    {
                        checked
                        {
                            return this.__index6Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index6Value = value;
                        }
                    }
                }

                public override Samples.SchemaFilesExample2.Cat[]? Children
                {
                    get
                    {
                        checked
                        {
                            return this.__index7Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index7Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 0);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_341066e2332b496399aef319d967480c(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.UInt32 ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 1);
                            if (relativeOffset == 0)
                            {
                                return default(System.UInt32);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_865e63b7119c4ca099070aff965bcbcc(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Boolean ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 2);
                            if (relativeOffset == 0)
                            {
                                return default(System.Boolean);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_ea9a784694f849b685951379834cf129(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex3Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 3);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_341066e2332b496399aef319d967480c(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.SchemaFilesExample2.CatBreed ReadIndex4Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 4);
                            if (relativeOffset == 0)
                            {
                                return default(Samples.SchemaFilesExample2.CatBreed);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_e3d2be6dfba94da9be89dbe21b5f2fbb(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Int64 ReadIndex5Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 5);
                            if (relativeOffset == 0)
                            {
                                return default(System.Int64);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_b7342012ca7742c98da0fa8f5339f66c(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Double ReadIndex6Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 6);
                            if (relativeOffset == 0)
                            {
                                return default(System.Double);
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_3cb7b569b92b45558225679839b2e3c6(buffer, absoluteLocation);
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static Samples.SchemaFilesExample2.Cat[]? ReadIndex7Value(
                    TInputBuffer buffer,
                    int offset,
                    VTable8 vtable)
                {
                    checked
                    {


                        int absoluteLocation;
                        {
                            int relativeOffset = vtable.OffsetOf(buffer, 7);
                            if (relativeOffset == 0)
                            {
                                return null;
                            }

                            absoluteLocation = offset + relativeOffset;
                        }

                        return Read_1c9e7d01b11a446ea71c0a67af854a44(buffer, absoluteLocation, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.Children);
                    }
                }
            }



            private static void WriteInlineValueOf_20290f751a1149edb97478331329a108<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Cat value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(70, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[20];

                    var index0Value = value.UniqueIdentfier;
                    var index1Value = value.AgeInYears;
                    var index2Value = value.IsFluffy;
                    var index3Value = value.Name;
                    var index4Value = value.Breed;
                    var index5Value = value.Whatever;
                    var index6Value = value.GramsOfFoodPerDay;
                    var index7Value = value.Children;

                    var index6Offset = tableStart;
                    if (index6Value != default(System.Double))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index6Offset = currentOffset;
                        currentOffset += 8;


                        WriteInlineValueOf_3cb7b569b92b45558225679839b2e3c6(spanWriter, span, index6Value, index6Offset);


                        if (18 > vtableLength)
                        {
                            vtableLength = 18;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index6Offset - tableStart), 16);

                    var index5Offset = tableStart;
                    if (index5Value != default(System.Int64))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 8);
                        index5Offset = currentOffset;
                        currentOffset += 8;


                        WriteInlineValueOf_b7342012ca7742c98da0fa8f5339f66c(spanWriter, span, index5Value, index5Offset);


                        if (16 > vtableLength)
                        {
                            vtableLength = 16;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index5Offset - tableStart), 14);

                    var index7Offset = tableStart;
                    if (!(index7Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index7Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 20;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index7Offset - tableStart), 18);

                    var index4Offset = tableStart;
                    if (index4Value != default(Samples.SchemaFilesExample2.CatBreed))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        currentOffset += 4;


                        WriteInlineValueOf_e3d2be6dfba94da9be89dbe21b5f2fbb(spanWriter, span, index4Value, index4Offset);


                        if (14 > vtableLength)
                        {
                            vtableLength = 14;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index4Offset - tableStart), 12);

                    var index3Offset = tableStart;
                    if (!(index3Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        currentOffset += 4;


                        if (12 > vtableLength)
                        {
                            vtableLength = 12;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                    var index1Offset = tableStart;
                    if (index1Value != default(System.UInt32))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 4;


                        WriteInlineValueOf_865e63b7119c4ca099070aff965bcbcc(spanWriter, span, index1Value, index1Offset);


                        if (8 > vtableLength)
                        {
                            vtableLength = 8;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index2Offset = tableStart;
                    if (index2Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        currentOffset += 1;


                        WriteInlineValueOf_ea9a784694f849b685951379834cf129(spanWriter, span, index2Value, index2Offset);


                        if (10 > vtableLength)
                        {
                            vtableLength = 10;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 70 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index7Offset != tableStart)
                    {


                        WriteInlineValueOf_1c9e7d01b11a446ea71c0a67af854a44(spanWriter, span, index7Value!, index7Offset, context);

                    }


                    if (index3Offset != tableStart)
                    {


                        WriteInlineValueOf_341066e2332b496399aef319d967480c(spanWriter, span, index3Value!, index3Offset, context, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.Name);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_341066e2332b496399aef319d967480c(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_23706d3bcf804a21856b6d65cfe2f809.UniqueIdentfier);

                    }

                }
            }

            private static class tableMetadata_23706d3bcf804a21856b6d65cfe2f809
            {

                public static readonly TableFieldContext UniqueIdentfier = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.UniqueIdentfier",
                    false,
                    false);

                public static readonly TableFieldContext AgeInYears = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.AgeInYears",
                    false,
                    false);

                public static readonly TableFieldContext IsFluffy = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.IsFluffy",
                    false,
                    false);

                public static readonly TableFieldContext Name = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Name",
                    false,
                    false);

                public static readonly TableFieldContext Breed = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Breed",
                    false,
                    false);

                public static readonly TableFieldContext Whatever = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Whatever",
                    false,
                    false);

                public static readonly TableFieldContext GramsOfFoodPerDay = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.GramsOfFoodPerDay",
                    false,
                    false);

                public static readonly TableFieldContext Children = new TableFieldContext(
                    "Samples.SchemaFilesExample2.Cat.Children",
                    false,
                    false);
            }


            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_865e63b7119c4ca099070aff965bcbcc(global::System.UInt32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.UInt32 Read_865e63b7119c4ca099070aff965bcbcc<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadUInt(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_865e63b7119c4ca099070aff965bcbcc<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.UInt32 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteUInt(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_ea9a784694f849b685951379834cf129(global::System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Boolean Read_ea9a784694f849b685951379834cf129<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_ea9a784694f849b685951379834cf129<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Boolean value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_e3d2be6dfba94da9be89dbe21b5f2fbb(global::Samples.SchemaFilesExample2.CatBreed value)
            {
                checked
                {
                    return GetMaxSizeOf_26f4eae7cfd64476abce90a91a14f667((global::System.Int32)value);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::Samples.SchemaFilesExample2.CatBreed Read_e3d2be6dfba94da9be89dbe21b5f2fbb<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (Samples.SchemaFilesExample2.CatBreed)Read_26f4eae7cfd64476abce90a91a14f667(buffer, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_e3d2be6dfba94da9be89dbe21b5f2fbb<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.CatBreed value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_26f4eae7cfd64476abce90a91a14f667(spanWriter, span, (global::System.Int32)value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_26f4eae7cfd64476abce90a91a14f667(global::System.Int32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Int32 Read_26f4eae7cfd64476abce90a91a14f667<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadInt(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_26f4eae7cfd64476abce90a91a14f667<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Int32 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteInt(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_b7342012ca7742c98da0fa8f5339f66c(global::System.Int64 value)
            {
                checked
                {
                    return 15;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Int64 Read_b7342012ca7742c98da0fa8f5339f66c<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadLong(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_b7342012ca7742c98da0fa8f5339f66c<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Int64 value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteLong(span, value, offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_3cb7b569b92b45558225679839b2e3c6(global::System.Double value)
            {
                checked
                {
                    return 15;
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static global::System.Double Read_3cb7b569b92b45558225679839b2e3c6<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                ) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadDouble(offset);
                }
            }

            [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_3cb7b569b92b45558225679839b2e3c6<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::System.Double value,
                int offset

                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteDouble(span, value, offset);
                }
            }

            private static int GetMaxSizeOf_1c9e7d01b11a446ea71c0a67af854a44(global::Samples.SchemaFilesExample2.Cat[] value)
            {
                checked
                {

                    int count = value.Length;
                    int runningSum = 14;

                    for (int i = 0; i < value.Length; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += GetMaxSizeOf_20290f751a1149edb97478331329a108(current);
                    }

                    return runningSum;
                }
            }

            private static global::Samples.SchemaFilesExample2.Cat[] Read_1c9e7d01b11a446ea71c0a67af854a44<TInputBuffer>(
                TInputBuffer buffer,
                int offset
                , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_79cebc197ea04b41b72bca8f3e00f62f<TInputBuffer>(
                        buffer,
                        offset + buffer.ReadUOffset(offset),
                        4,
                        fieldContext)).ToArray();
                }
            }

            public sealed class FlatBufferVector_79cebc197ea04b41b72bca8f3e00f62f<TInputBuffer> : FlatBufferVector<global::Samples.SchemaFilesExample2.Cat, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_79cebc197ea04b41b72bca8f3e00f62f(
                    TInputBuffer memory,
                    int offset,
                    int itemSize,
                    TableFieldContext fieldContext) : base(memory, offset, itemSize, fieldContext)
                {
                    checked
                    {
                    }
                }

                protected override void ParseItem(
                    TInputBuffer memory,
                    int offset,
                    TableFieldContext fieldContext,
                    out global::Samples.SchemaFilesExample2.Cat item)
                {
                    checked
                    {
                        item = Read_20290f751a1149edb97478331329a108(memory, offset);
                    }
                }

                protected override void WriteThrough(global::Samples.SchemaFilesExample2.Cat item, Span<byte> data)
                {
                    checked
                    {
                        throw new NotSupportedException("write through is not available for this type");
                    }
                }
            }



            private static void WriteInlineValueOf_1c9e7d01b11a446ea71c0a67af854a44<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                global::Samples.SchemaFilesExample2.Cat[] value,
                int offset
                , SerializationContext context
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Length;
                    int vectorOffset = context.AllocateVector(4, count, 4);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    for (int i = 0; i < value.Length; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        WriteInlineValueOf_20290f751a1149edb97478331329a108(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        #endregion
    }

}

